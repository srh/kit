import basicanal;
import check;
import dumbgen;
import io;
import linux_objfile;
import win_objfile;
import osx_objfile;
import objfile;

func build_nowrite_module(cs *checkstate, modulename sym, flattened_out *array[u8]) np {
  #check_module(cs, modulename);

  f objfile = mk_objfile();

  add_fn_body_symbols(cs, &f);

  #build_fn_bodies(cs, &f);

  #add_export_symbols(cs, &f, modulename);

  switch cs->plat.opsys {
  case Linux32:
    *flattened_out = linux32_flatten(cs->im, &f);
  case Win32:
    *flattened_out = win_flatten(cs->im, &f);
  case Osx32:
    *flattened_out = osx32_flatten(cs->im, &f);
  }

  return NoFail;
}

func build_module(cs *checkstate, modulename sym) np {
  flattened array[u8];
  #build_nowrite_module(cs, modulename, &flattened);

  path array[u8] = to_u8str(lookup(cs->im, modulename));
  switch cs->plat.opsys {
  case Linux32:
    append(&path, _u8(".o"));
  case Win32:
    append(&path, _u8(".obj"));
  case Osx32:
    append(&path, _u8(".o"));
  }

  if !write_file(path, &flattened) {
    return ERR(_u8("Could not write object file"));
  }

  return NoFail;
}

func build_fn_bodies(cs *checkstate, f *objfile) np {
  nbodies size = count(&cs->fn_bodies);
  for i size = 0; i < nbodies; i = i + 1 {
    ent *fn_body_entry = oo(ref(&cs->fn_bodies, i));
    #build_fn_body(cs, f, ent);
  }
  // We pad after the last func so that .text is alignod to 16-byte.
  fillercode_align_double_quadword(f);
  return NoFail;
}

func build_fn_body(cs *checkstate, f *objfile, ent *fn_body_entry) np {
  switch &ent->u {
  case &GraphedFnBody(g graphed_fn_body):
    // DBG(_u8("build fn body for "), lookup(cs->im, g.graph.gr.informal_name));
    #basic_and_inline(cs, &g);

    fillercode_align_double_quadword(f);
    text_offset u32 = secsize(&f->text);
    set_symbol_value(f, *un(&ent->symbol_table_index), text_offset);
    annotate(&ent->body_text_offset, text_offset);
    return dumbly_gen_graphed_fn_body(cs, f, &g);
  case &ExternFnBody(e extern_fn_body):
    // We have nothing to do, of course.
    return NoFail;
  }
}

func add_export_symbols(cs *checkstate, f *objfile, modulename sym) np {
  mod_id module_id = unHas(lookup(&cs->modules_by_name, &modulename));
  mod *module = ref_module(cs, mod_id);
  ndefs size = count(&mod->defs);
  for i size = 0; i < ndefs; i = i + 1 {
    ent_id def_entry_id = get(&mod->defs, i);
    ent *def_entry = ref_def_entry(cs, ent_id);
    if def_is_export(ent) {
      idyparms idy_genparms = blank_idyparms();
      if case Has(inst_id def_inst_id) = lookup_sole_value(&ent->insts, &idyparms) {
        inst *def_inst = ref_inst(cs, inst_id);
        if !is_fn_type(cs, &un(&inst->typeinfo)->cu.x) {
          return ERR(_u8("Cannot codegen export symbols for non-fn def (can only export functions)"));
        }
        if case &Computed(val st_value) = &inst->evaled_value {
          fnid fn_body_id;
          if case Unprinted(pm) = x86_simple_symbolref(cs, &val, &fnid) {
            return Unprinted({true, err_string(_u8("Export fn-symbol has invalid value (zero-initialized "
                                                   "fn[...] value, I bet)"))});
          }
          body_text_offset u32 = *un(&ref_fn_body(cs, fnid)->body_text_offset);
          discard sti = add_local_symbol(f, c_symbol_name(cs, ent->def_name), body_text_offset, SectionText, IsStaticNo);
        } else {
          ice(_u8("add_export_symbols sees unevaled inst"));
        }
      } else {
        ice(_u8("add_export_symbols cannot find inst (export-with-generics?)"));
      }
    }
  }

  return NoFail;
}

func def_is_export(ent *def_entry) bool {
  if case &DefnHasRhs(np def_nonprim) = &ent->definition {
    if case &Def(d ast_def) = np.tl {
      if case IsExport = d.is_export {
        return true;
      }
    }
  }
  return false;
}

func add_fn_body_symbols(cs *checkstate, f *objfile) void {
  nbodies size = count(&cs->fn_bodies);
  for i size = 0; i < nbodies; i = i + 1 {
    ent *fn_body_entry = oo(ref(&cs->fn_bodies, i));
    add_fn_body_symbol(cs, f, ent);
  }
}

func argcell_types(cs *checkstate, g *graphed_fn_body) shray[cu_typeexpr] {
  bu array[cu_typeexpr];
  nargcells size = count(&g->argcells);
  for i size = 0; i < nargcells; i = i + 1 {
    push(&bu, ref_cell(&g->graph.gr, get(&g->argcells, i))->type);
  }
  return freeze(&bu);
}

func add_fn_body_symbol(cs *checkstate, f *objfile, ent *fn_body_entry) void {
  switch &ent->u {
  case &GraphedFnBody(g graphed_fn_body):
    arg_types shray[cu_typeexpr] = argcell_types(cs, &g);
    // We do make symbol names for prim fn bodies, but maybe we won't actually generate them.
    name sym = generate_kit_name(cs, ent->informal_name, arg_types);
    symbol_table_index sti = add_local_symbol(f, name, 0 /* We'll overwrite the value later. */,
                                              SectionText, IsStaticNo);
    annotate(&ent->symbol_table_index, symbol_table_index);
  case &ExternFnBody(e extern_fn_body):
    c_name sym = c_symbol_name(cs, e.name);
    symbol_table_index sti = add_remote_symbol(f, c_name, IsFunctionYes);
    annotate(&ent->symbol_table_index, symbol_table_index);
  }
}

func generate_kit_name(cs *checkstate, informal_name sym, arg_types shray[cu_typeexpr]) sym {
  build string = _s("_kit_");
  num u32 = cs->kit_name_counter + 1;
  cs->kit_name_counter = num;
  build = build + from_u8(to_u8str(num));
  build = build + _s("_");
  build = build + lookup(cs->im, informal_name);
  btmp array[u8];
  push(&btmp, '(');
  nargtypes size = count(&arg_types);
  for i size = 0; i < nargtypes; i = i + 1 {
    if i != 0 {
      push(&btmp, ',');
      push(&btmp, ' ');
    }
    pretty_u8str(cs->im, &btmp, &ref(&arg_types, i)->x);
  }
  push(&btmp, ')');
  return intern(cs->im, build + from_u8(&btmp));
}

func c_symbol_name(cs *checkstate, name sym) sym {
  switch cs->plat.opsys {
  case Linux32:
    return name;
  case Win32:
    namestr string = lookup(cs->im, name);
    return intern(cs->im, _s("_") + namestr);
  case Osx32:
    namestr string = lookup(cs->im, name);
    return intern(cs->im, _s("_") + namestr);
  }
}
