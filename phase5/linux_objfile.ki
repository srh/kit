import objfile;

def kEI_NIDENT u32 = 16;

struct elf32_Header {
  // TODO: Move constant 16 to a def kEI_NIDENT (when the language supports it).
  e_ident ^[16]u8;
  // Type: Relocatable, executable, etc.
  e_type le_u16;
  // Machine: 386, amd64, etc.
  e_machine le_u16;
  // Version: Should be EV_CURRENT.
  e_version le_u32;
  // Entry point (for executables).
  e_entry le_u32;
  // Program header offset, zero for .o files.
  e_phoff le_u32;
  // Section header offset.
  e_shoff le_u32;
  // Flags, none defined.  (Zero.)
  e_flags le_u32;
  // Size of this elf header.
  e_ehsize le_u16;
  // Size of a program header entry.  (Zero for .o files?)
  e_phentsize le_u16;
  // Number of program header entries.  (Zero for .o files.)
  e_phnum le_u16;
  // Size of a section header entry.
  e_shentsize le_u16;
  // Number of section headers.
  e_shnum le_u16;
  // Section header table index of the entry associated with the section name string
  // table.  Or SHN_UNDEF, if the file has no section name string table.  Must be less
  // than SHN_LORESERVE (0xff00), otherwise the value is stored elsewhere.
  e_shstrndx le_u16;
}

struct elf32_Section_Header {
  // An index into the section header string table section.
  sh_name le_u32;
  /* SHT_PROGBITS for "information defined by the program", SHT_SYMTAB
  for a symbol table, SHT_STRTAB for a string table, SHT_RELA for
  "relocation entries with explicit addends", SHT_REL for "relocation
  offsets without explicit addends", SHT_NOBITS for .bss section. */
  sh_type le_u32;
  /* flags: SHF_WRITE: data that should be writable during process
  execution.  SHF_ALLOC: This secton occupies memory during process
  execution.  SHF_EXECINSTR: This section contains executable machine
  instructions. */
  sh_flags le_u32;
  /* The address at which the section's first byte should reside?  So,
  zero for .o files? */
  sh_addr le_u32;
  // File offset of the section.
  sh_offset le_u32;
  // Section's size in bytes.
  sh_size le_u32;
  // A "section header table index link."
  sh_link le_u32;
  // Extra info.
  sh_info le_u32;
  // Section alignment constraint.  0 means the same as 1.
  sh_addralign le_u32;
  /* For sections that hold a table of fixed-size entries: The size in
  bytes for each entry. */
  sh_entsize le_u32;
}

struct elf32_Symtab_Entry {
  st_name le_u32;
  st_value le_u32;
  st_size le_u32;
  st_info u8;
  st_other u8;
  st_shndx le_u16;
}

struct elf32_Rel {
  r_offset le_u32;
  r_info le_u32;
}

/* Seems like a good idea. */
// These are all def'd to be u32's because I don't know what to define them as.

def kRel_Section_Alignment u32 = 8;

def kELFCLASS32 u8 = 1;
def kELFDATA2LSB u8 = 1;
def kEV_CURRENT u32 = 1;
def kELFOSABI_LINUX u32 = 3;
def kET_REL u32 = 1;
def kEM_386 u32 = 3;
def kSHT_NULL u32 = 0;
def kSHT_PROGBITS u32 = 1;
def kSHT_SYMTAB u32 = 2;
def kSHT_STRTAB u32 = 3;
def kSHT_REL u32 = 9;
def kSTT_OBJECT u8 = 1;
def kSTT_FUNC u8 = 2;
def kSTB_LOCAL u8 = 0;
def kSTB_GLOBAL u8 = 1;
def kSHN_UNDEF u32 = 0;
def kLinux32DataSectionNumber u32 = 5;
def kLinux32RodataSectionNumber u32 = 7;
def kLinux32TextSectionNumber u32 = 9;
def kSHF_WRITE u32 = 1;
def kSHF_ALLOC u32 = 2;
def kSHF_EXEC u32 = 4;
def kR_386_32 u32 = 1;
def kR_386_PC32 u32 = 2;

func linux32_flatten(im *identmap, f *objfile) array[u8] {
  d array[u8];
  section_header_offset u32 = ~sizeof@[elf32_Header];
  kNumSectionHeaders u32 = 10;
  end_of_section_headers u32 = section_header_offset + kNumSectionHeaders * ~sizeof@[elf32_Section_Header];

  sh_strtab_offset u32 = end_of_section_headers;

  sh_strtab array[u8];
  ign u32 = strtab_add(&sh_strtab, _u8(""));
  dot_shstrtab_index u32 = strtab_add(&sh_strtab, _u8(".shstrtab"));
  dot_strtab_index u32 = strtab_add(&sh_strtab, _u8(".strtab"));
  dot_symtab_index u32 = strtab_add(&sh_strtab, _u8(".symtab"));
  dot_rel_data_index u32 = strtab_add(&sh_strtab, _u8(".rel.data"));
  dot_data_index u32 = strtab_add(&sh_strtab, _u8(".data"));
  dot_rel_rodata_index u32 = strtab_add(&sh_strtab, _u8(".rel.rodata"));
  dot_rodata_index u32 = strtab_add(&sh_strtab, _u8(".rodata"));
  dot_rel_text_index u32 = strtab_add(&sh_strtab, _u8(".rel.text"));
  dot_text_index u32 = strtab_add(&sh_strtab, _u8(".text"));
  ign = strtab_add(&sh_strtab, _u8(""));

  sym_strtab_offset u32 = sh_strtab_offset + ~count(&sh_strtab);

  symbols array[u8];
  strings array[u8];
  sti_map array[u32];
  end_local_symbols u32;
  linux32_write_symbols_and_strings(im, f, &symbols, &strings, &sti_map, &end_local_symbols);

  sym_strtab_size u32 = ~count(&strings);
  sym_strtab_end u32 = sym_strtab_offset + sym_strtab_size;

  // I don't know, align it to 16 (that's its entry size).
  kSymtabAlignment u32 = 16;
  symtab_offset u32 = ceil_aligned(sym_strtab_end, kSymtabAlignment);
  symtab_size u32 = ~count(&symbols);
  symtab_end u32 = symtab_offset + symtab_size;

  sh_rel_data elf32_Section_Header;
  sh_data elf32_Section_Header;
  data_end u32;
  linux32_section_headers(symtab_end, kLinux32DataSectionNumber, &f->data, dot_rel_data_index, dot_data_index, kSHF_WRITE, &sh_rel_data, &sh_data, &data_end);

  sh_rel_rodata elf32_Section_Header;
  sh_rodata elf32_Section_Header;
  rodata_end u32;
  linux32_section_headers(data_end, kLinux32RodataSectionNumber, &f->rdata, dot_rel_rodata_index, dot_rodata_index, 0, &sh_rel_rodata, &sh_rodata, &rodata_end);

  sh_rel_text elf32_Section_Header;
  sh_text elf32_Section_Header;
  text_end u32;
  linux32_section_headers(rodata_end, kLinux32TextSectionNumber, &f->text, dot_rel_text_index, dot_text_index, kSHF_EXEC, &sh_rel_text, &sh_text, &text_end);

  if true {
    h elf32_Header;
    h.e_ident[0] = 0x7f;
    h.e_ident[1] = 'E';
    h.e_ident[2] = 'L';
    h.e_ident[3] = 'F';
    h.e_ident[4] = kELFCLASS32;
    h.e_ident[5] = kELFDATA2LSB;
    h.e_ident[6] = ~kEV_CURRENT;
    h.e_ident[7] = 0;  // kELFOSABI_LINUX;
    h.e_ident[8] = 0;  // EI_ABIVERSION (= 8): must use zero.
    // padding
    n_kEI_NIDENT size = ~kEI_NIDENT;
    fill(ixcast(&h.e_ident[9]), ~(kEI_NIDENT - 9), 0);

    h.e_type = to_le! @[u16] ~kET_REL;
    h.e_machine = to_le! @[u16] ~kEM_386;
    h.e_version = to_le! kEV_CURRENT;
    h.e_entry = to_le! @[u32] 0;
    h.e_phoff = to_le! @[u32] 0;
    h.e_shoff = to_le! section_header_offset;
    h.e_flags = to_le! @[u32] 0;
    h.e_ehsize = to_le! @[u16] ~sizeof@[elf32_Header];
    h.e_phentsize = to_le! @[u16] 0;
    h.e_phnum = to_le! @[u16] 0;
    h.e_shentsize = to_le! @[u16] ~sizeof@[elf32_Section_Header];
    h.e_shnum = to_le! @[u16] ~kNumSectionHeaders;
    // String table section header is at index 1.
    h.e_shstrndx = to_le! @[u16] 1;

    append_reinterpret(&d, &h);
  }

  if true {
    // Null section header (for index 0).
    sh elf32_Section_Header;
    sh.sh_name = to_le! @[u32] 0;
    sh.sh_type = to_le! kSHT_NULL;
    sh.sh_flags = to_le! @[u32] 0;
    sh.sh_addr = to_le! @[u32] 0;
    sh.sh_offset = to_le! @[u32] 0;
    sh.sh_size = to_le! @[u32] 0;
    sh.sh_link = to_le! @[u32] 0;
    sh.sh_info = to_le! @[u32] 0;
    sh.sh_addralign = to_le! @[u32] 0;
    sh.sh_entsize = to_le! @[u32] 0;
    append_reinterpret(&d, &sh);
  }

  if true {
    // Strings table section header -- index 1.
    sh elf32_Section_Header;
    sh.sh_name = to_le! dot_shstrtab_index;
    sh.sh_type = to_le! kSHT_STRTAB;
    sh.sh_flags = to_le! @[u32] 0;
    sh.sh_addr = to_le! @[u32] 0;
    sh.sh_offset = to_le! sh_strtab_offset;
    sh.sh_size = to_le! @[u32] ~count(&sh_strtab);
    sh.sh_link = to_le! @[u32] 0;
    sh.sh_info = to_le! @[u32] 0;
    sh.sh_addralign = to_le! @[u32] 0;
    sh.sh_entsize = to_le! @[u32] 0;
    append_reinterpret(&d, &sh);
  }

  if true {
    // Symbol table strings section header -- index 2.
    sh elf32_Section_Header;
    sh.sh_name = to_le! dot_strtab_index;
    sh.sh_type = to_le! kSHT_STRTAB;
    sh.sh_flags = to_le! @[u32] 0;
    sh.sh_addr = to_le! @[u32] 0;
    sh.sh_offset = to_le! sym_strtab_offset;
    sh.sh_size = to_le! sym_strtab_size;
    sh.sh_link = to_le! @[u32] 0;
    sh.sh_info = to_le! @[u32] 0;
    sh.sh_addralign = to_le! @[u32] 0;
    sh.sh_entsize = to_le! @[u32] 0;
    append_reinterpret(&d, &sh);
  }

  if true {
    check(kSymTabSectionNumber == 3);
    // Symbol table section header -- index 3.
    sh elf32_Section_Header;
    sh.sh_name = to_le! dot_symtab_index;
    sh.sh_type = to_le! kSHT_SYMTAB;
    sh.sh_flags = to_le! @[u32] 0;
    sh.sh_addr = to_le! @[u32] 0;
    sh.sh_offset = to_le! symtab_offset;
    sh.sh_size = to_le! symtab_size;
    // The associated string table's section header index.
    sh.sh_link = to_le! @[u32] 2;
    sh.sh_info = to_le! end_local_symbols;
    sh.sh_addralign = to_le! @[u32] 0;
    sh.sh_entsize = to_le! @[u32] ~sizeof@[elf32_Symtab_Entry];
    append_reinterpret(&d, &sh);
  }

  check(kLinux32DataSectionNumber == 5);
  append_reinterpret(&d, &sh_rel_data);
  append_reinterpret(&d, &sh_data);
  check(kLinux32RodataSectionNumber == 7);
  append_reinterpret(&d, &sh_rel_rodata);
  append_reinterpret(&d, &sh_rodata);
  check(kLinux32TextSectionNumber == 9);
  append_reinterpret(&d, &sh_rel_text);
  append_reinterpret(&d, &sh_text);

  // Section headers done -- append string table.
  check(~count(&d) == sh_strtab_offset);
  append(&d, &sh_strtab);

  check(~count(&d) == sym_strtab_offset);
  append(&d, &strings);
  check(~count(&d) == sym_strtab_end);

  append_to_alignment(&d, ~kSymtabAlignment, 0);
  check(~count(&d) == symtab_offset);
  append(&d, &symbols);
  check(~count(&d) == symtab_end);
  append_to_alignment(&d, ~kRel_Section_Alignment, 0);
  check(~count(&d) == from_le! sh_rel_data.sh_offset);
  linux32_append_relocations_and_mutate_section(&sti_map, &d, &f->data);
  append_to_alignment(&d, ~f->data.max_requested_alignment, 0);
  check(~count(&d) == from_le! sh_data.sh_offset);
  append(&d, &f->data.raw);

  append_to_alignment(&d, ~kRel_Section_Alignment, 0);
  check(~count(&d) == from_le! sh_rel_rodata.sh_offset);
  linux32_append_relocations_and_mutate_section(&sti_map, &d, &f->rdata);
  append_to_alignment(&d, ~f->rdata.max_requested_alignment, 0);
  check(~count(&d) == from_le! sh_rodata.sh_offset);
  append(&d, &f->rdata.raw);

  append_to_alignment(&d, ~kRel_Section_Alignment, 0);
  check(~count(&d) == from_le! sh_rel_text.sh_offset);
  linux32_append_relocations_and_mutate_section(&sti_map, &d, &f->text);
  append_to_alignment(&d, ~f->text.max_requested_alignment, 0);
  check(~count(&d) == from_le! sh_text.sh_offset);
  append(&d, &f->text.raw);

  return d;
}

// TODO: (Also in s1:) Don't mutate the section, plz.  Thanks.
func linux32_append_relocations_and_mutate_section(sti_map *array[u32], d *array[u8], s *objfile_section) void {
  nrelocs size = count(&s->relocs);
  for i size = 0; i < nrelocs; i = i + 1 {
    reloc *objfile_relocation = ref(&s->relocs, i);
    rel elf32_Rel;
    rel.r_offset = to_le! reloc->virtual_address;
    sti u32 = reloc->symbol_table_index.x;
    new_sti u32 = get(sti_map, ~sti);
    check(new_sti <= (@[u32]0xFFFFFFFF >> 8));
    rel_type u32;
    addend_le le_i32;
    switch reloc->type {
    case Dir32:
      rel_type = kR_386_32;
      addend_le = to_le! @[i32] 0;
    case Rel32:
      rel_type = kR_386_PC32;
      addend_le = to_le! - @[i32] 4;  // (There's a negative sign!)
    case Diff32:
      crash(_u8("linux sees Diff32 reloc"));
    }
    rel.r_info = to_le! ((new_sti << 8) | rel_type);
    append_reinterpret(d, &rel);

    overwrite_raw(&s->raw, ~ @[u32] from_le! rel.r_offset, ixcast(&addend_le.buf[0]), sizeof@[le_i32]);
  }
}

def kSymTabSectionNumber u32 = 3;

func linux32_section_headers(prev_end_offset u32, sh_out_index u32, s *objfile_section,
                             sh_strtab_rel_index u32, sh_strtab_index u32, sh_flags u32,
                             rel_out *elf32_Section_Header, sh_out *elf32_Section_Header, end_out *u32) void {
  rel_offset u32 = ceil_aligned(prev_end_offset, kRel_Section_Alignment);
  rel_size u32 = ~(count(&s->relocs) * sizeof@[elf32_Rel]);
  rel_end u32 = rel_offset + rel_size;
  sh_alignment u32 = s->max_requested_alignment;
  sh_offset u32 = ceil_aligned(rel_end, sh_alignment);
  sh_size u32 = ~count(&s->raw);
  sh_end u32 = sh_offset + sh_size;

  rel_out->sh_name = to_le! sh_strtab_rel_index;
  rel_out->sh_type = to_le! kSHT_REL;
  rel_out->sh_flags = to_le! @[u32] 0;
  rel_out->sh_addr = to_le! @[u32] 0;
  rel_out->sh_offset = to_le! rel_offset;
  rel_out->sh_size = to_le! rel_size;
  rel_out->sh_link = to_le! kSymTabSectionNumber;
  rel_out->sh_info = to_le! sh_out_index;
  rel_out->sh_addralign = to_le! @[u32] 0;
  rel_out->sh_entsize = to_le! @[u32] ~sizeof@[elf32_Rel];

  sh_out->sh_name = to_le! sh_strtab_index;
  sh_out->sh_type = to_le! kSHT_PROGBITS;
  sh_out->sh_flags = to_le! (kSHF_ALLOC | sh_flags);
  sh_out->sh_addr = to_le! @[u32] 0;
  sh_out->sh_offset = to_le! sh_offset;
  sh_out->sh_size = to_le! sh_size;
  sh_out->sh_link = to_le! kSHN_UNDEF;
  sh_out->sh_info = to_le! @[u32] 0;
  sh_out->sh_addralign = to_le! sh_alignment;
  sh_out->sh_entsize = to_le! @[u32] 0;

  *end_out = sh_end;
}

func linux32_write_symbols_and_strings(im *identmap, f *objfile,
                                       symbols_out *array[u8], strings_out *array[u8],
                                       sti_map_out *array[u32], end_locals_out *u32) void {
  symbols array[u8];
  symbols_count u32 = 0;
  strings array[u8];
  ign var = strtab_add(&strings, _u8(""));

  // Maps from f->symbol_table's indexes to symbols indexes, because they get reordered
  // (and index zero cannot be used).
  sti_map array[u32] = repeat(count(&f->symbol_table), @[u32] 0);

  if true {
    ent elf32_Symtab_Entry;
    ent.st_name = to_le! @[u32] 0;
    ent.st_value = to_le! @[u32] 0;
    ent.st_size = to_le! @[u32] 0;
    ent.st_info = 0;
    ent.st_other = 0;
    ent.st_shndx = to_le! @[u16] ~ kSHN_UNDEF;
    append_reinterpret(&symbols, &ent);
    symbols_count = symbols_count + 1;
  }

  n_symbol_table size = count(&f->symbol_table);
  for i size = 0; i < n_symbol_table; i = i + 1 {
    rec *objfile_symbol_record = ref(&f->symbol_table, i);
    if case IsStaticYes = rec->is_static {
      push_symbol(im, rec, &symbols, &strings);
      *ref(&sti_map, i) = symbols_count;
      symbols_count = symbols_count + 1;
    }
  }

  end_locals u32 = symbols_count;

  for i size = 0; i < n_symbol_table; i = i + 1 {
    rec *objfile_symbol_record = ref(&f->symbol_table, i);
    if case IsStaticNo = rec->is_static {
      push_symbol(im, rec, &symbols, &strings);
      *ref(&sti_map, i) = symbols_count;
      symbols_count = symbols_count + 1;
    }
  }

  ign = strtab_add(&strings, _u8(""));

  *symbols_out = symbols;
  *strings_out = strings;
  *sti_map_out = sti_map;
  *end_locals_out = end_locals;
}

func push_symbol(im *identmap, symbol *objfile_symbol_record, symbols *array[u8], strings *array[u8]) void {
  // TODO: (Also in s1:) This and the for loop below is just a copy/paste job.
  ent elf32_Symtab_Entry;
  name sym = symbol->name;
  name_buf string = lookup(im, name);

  offset u32 = strtab_add(strings, zeroless_string_to_u8symbol(&name_buf));
  ent.st_name = to_le! offset;
  ent.st_value = to_le! symbol->value;
  // TODO: (Also in s1:) It's OK to just use zero for everything?
  ent.st_size = to_le! @[u32] 0;
  st_info u8;
  if case IsFunctionYes = symbol->is_function {
    st_info = kSTT_FUNC;
  } else {
    st_info = kSTT_OBJECT;
  }
  if case IsStaticYes = symbol->is_static {
    st_info = st_info | (kSTB_LOCAL << 4);
  } else {
    st_info = st_info | (kSTB_GLOBAL << 4);
  }
  ent.st_info = st_info;
  ent.st_other = 0;

  switch symbol->section {
  case SymbolSectionUndefined: ent.st_shndx = to_le! @[u16] ~kSHN_UNDEF;
  case SymbolSectionData: ent.st_shndx = to_le! @[u16] ~kLinux32DataSectionNumber;
  case SymbolSectionRdata: ent.st_shndx = to_le! @[u16] ~kLinux32RodataSectionNumber;
  case SymbolSectionText: ent.st_shndx = to_le! @[u16] ~kLinux32TextSectionNumber;
  }

  append_reinterpret(symbols, &ent);
}
