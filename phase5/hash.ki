import array;
import stdlib;

// The type K must have the following functions implemented:
// func hash_compute_hash(x *K) osize;
// func hash_equal(x *K, y *K) bool;

enum[K, V] hash_entry {
  HashEmpty void;
  HashValue tup[K, V];
  HashErased void;
}

defclass[K, V] copy hash {
  // count(&arr) is zero or a power of two.
  arr array[hash_entry[K, V]];
  // cell_count, the number of HashValue and HashErased entries, is less than half count(&arr).
  cell_count size;
  // user_count, the number of HashValue entries, is just for a user-facing count(...) function.
  user_count size;
}

access hash[_, _] {
  inline func[K, V] do_init(h *hash[K, V]) void {
    init(&h->arr);
    h->cell_count = 0;
    h->user_count = 0;
  }

  func[K, V] rebuild_(h *hash[K, V], new_limit size) void {
    new_mask size = new_limit - 1;
    check(0 == (new_limit & new_mask));
    check(h->cell_count * 2 < new_limit);

    new_array array[hash_entry[K, V]] = repeat(new_limit, HashEmpty);
    old_limit size = count(&h->arr);
    for i size = 0; i < old_limit; i = i + 1 {
      if case &HashValue(p tup[K, V]) = ref(&h->arr, i) {
        offset size = ~ @[osize]hash_compute_hash(&p.car) & new_mask;
        step size = 1;
        done bool = false;
        while !done {
          switch ref(&new_array, offset) {
          case &HashEmpty:
            done = true;
          case &HashValue(new_p tup[K, V]):
            offset = (offset + step) & new_mask;
            step = step + 1;
          }
        }

        *ref(&new_array, offset) = get(&h->arr, i);
      }
    }

    h->cell_count = h->user_count;
    swap(&h->arr, &new_array);
  }

  inline func[K, V] try_insert(h *hash[K, V], key *K, value V) bool {
    return try_insert_ref(h, key, &value);
  }

  func[K, V] try_insert_ref(h *hash[K, V], key *K, value *V) bool {
    if count(&h->arr) == 0 {
      rebuild_(h, 8);
    }

    mask size = count(&h->arr) - 1;
    offset size = ~ @[osize]hash_compute_hash(key) & mask;
    step size = 1;
    for ;; {
      switch ref(&h->arr, offset) {
      case &HashEmpty:
        *ref(&h->arr, offset) = @[hash_entry[K, V]]HashValue({*key, *value});
        h->user_count = h->user_count + 1;
        h->cell_count = h->cell_count + 1;
        if h->cell_count * 2 >= count(&h->arr) {
          rebuild_(h, count(&h->arr) * 2);
        }
        return true;
      case &HashValue(p tup[K, V]):
        if hash_equal(&p.car, key) {
          return false;
        }
        offset = (offset + step) & mask;
        step = step + 1;
      case &HashErased:
        insertion_offset size = offset;
        for ;; {
          offset = (offset + step) & mask;
          step = step + 1;
          switch ref(&h->arr, offset) {
          case &HashEmpty:
            *ref(&h->arr, insertion_offset) = @[hash_entry[K, V]]HashValue({*key, *value});
            h->user_count = h->user_count + 1;
            return true;
          case &HashValue(p tup[K, V]):
            if hash_equal(&p.car, key) {
              return false;
            }
          case &HashErased:
            void;
          }
        }
      }
    }
  }

  func[K, V] try_remove(h *hash[K, V], key *K) bool {
    arr_count size = count(&h->arr);
    if arr_count == 0 {
      return false;
    }

    mask size = arr_count - 1;
    offset size = ~ @[osize]hash_compute_hash(key) & mask;
    step size = 1;
    for ;; {
      switch ref(&h->arr, offset) {
      case &HashEmpty:
        return false;
      case &HashValue(p tup[K, V]):
        if hash_equal(&p.car, key) {
          *ref(&h->arr, offset) = HashErased;
          h->user_count = h->user_count - 1;
          return true;
        }
      case &HashErased:
        void;
      }
      offset = (offset + step) & mask;
      step = step + 1;
    }
  }

  // Return value's invalidated by any modification to the hash.
  func[K, V] lookup_ref(h *hash[K, V], key *K) opt[*V] {
    hash_count size = count(&h->arr);
    if hash_count == 0 {
      return None;
    }
    mask size = hash_count - 1;
    offset size = ~ @[osize]hash_compute_hash(key) & mask;
    step size = 1;
    for ;; {
      switch ref(&h->arr, offset) {
      case &HashEmpty:
        return None;
      case &HashValue(p tup[K, V]):
        if hash_equal(&p.car, key) {
          return Has(&p.cdr);
        }
      case &HashErased:
        void;
      }
      offset = (offset + step) & mask;
      step = step + 1;
    }
  }

  inline func[K, V] count(h *hash[K, V]) size {
    return h->user_count;
  }

  struct[K, V] hash_iter {
    h *hash[K, V];
    index size;
  }

  inline func[K, V] iter(a *hash[K, V]) hash_iter[K, V] {
    ret hash_iter[K, V] = {a, 0};
    return ret;
  }

  func[K, V] next(it *hash_iter[K, V]) opt[*tup[K, V]] {
    i size = it->index;
    ha *array[hash_entry[K, V]] = &it->h->arr;
    n size = count(ha);
    d * ^[0]hash_entry[K, V] = data(ha);
    for ; i < n; i = i + 1 {
      if case &HashValue(p tup[K, V]) = &d[i] {
        it->index = i + 1;
        return Has(&p);
      }
    }
    it->index = i;
    return None;
  }

  func[K, V] swap(x *hash[K, V], y *hash[K, V]) void {
    swap(&x->arr, &y->arr);
    tmp_cell size = x->cell_count;
    x->cell_count = y->cell_count;
    y->cell_count = tmp_cell;
    tmp_user size = x->user_count;
    x->user_count = y->user_count;
    y->user_count = tmp_user;
  }
}

inline func[K, V] empty(a *hash[K, V]) bool {
  return count(a) == 0;
}

func[T] sets_equal(a *hash[T, void], b *hash[T, void]) bool {
  if count(a) != count(b) {
    return false;
  }
  it hash_iter[T, void] = iter(a);
  while case Has(p *tup[T, void]) = next(&it) {
    if !isHas(lookup_ref(b, &p->car)) {
      return false;
    }
  }
  return true;
}

func[T] intersects(a *hash[T, void], b *hash[T, void]) bool {
  n size = count(a);
  bn size = count(b);
  if bn < n {
    n = bn;
    tmp var = a;
    a = b;
    b = tmp;
  }
  it hash_iter[T, void] = iter(a);
  while case Has(p *tup[T, void]) = next(&it) {
    if isHas(lookup_ref(b, &p->car)) {
      return true;
    }
  }
  return false;
}

func[T] set_union(a *hash[T, void], b *hash[T, void], out *hash[T, void]) void {
  build hash[T, void] = *a;
  add_union(&build, b);
  swap(out, &build);
}

func[T] sets_union(xs *shray[hash[T, void]], out *hash[T, void]) void {
  build hash[T, void];
  n size = count(xs);
  for i size = 0; i < n; i = i + 1 {
    add_union(&build, ref(xs, i));
  }
  swap(out, &build);
}

// Adds the elements of a that are not in b into onto.
func[T] add_union_difference(onto *hash[T, void], a *hash[T, void], b *hash[T, void]) void {
  it hash_iter[T, void] = iter(a);
  while case Has(p *tup[T, void]) = next(&it) {
    if case None = lookup_ref(b, &p->car) {
      discard bool = try_insert(onto, &p->car, void);
    }
  }
}

func[K, V] add_disjoint(onto *hash[K, V], from *hash[K, V]) bool {
  it hash_iter[K, V] = iter(from);
  while case Has(p *tup[K, V]) = next(&it) {
    if !try_insert(onto, &p->car, p->cdr) {
      return false;
    }
  }
  return true;
}

func[T] add_union(onto *hash[T, void], from *hash[T, void]) void {
  it hash_iter[T, void] = iter(from);
  while case Has(p *tup[T, void]) = next(&it) {
    discard bool = try_insert(onto, &p->car, void);
  }
}

func[K, V] check_remove(h *hash[K, V], key *K) void {
  if !try_remove(h, key) {
    crash();
  }
}

func[T] remove_exactly(mutie *hash[T, void], diff *hash[T, void]) void {
  it hash_iter[T, void] = iter(diff);
  while case Has(p *tup[T, void]) = next(&it) {
    if !try_remove(mutie, &p->car) {
      crash();
    }
  }
}

func[K, V] check_insert(h *hash[K, V], key *K, value V) void {
  if !try_insert(h, key, value) {
    crash();
  }
}

func[K, V] lookup(h *hash[K, V], key *K) opt[V] {
  if case Has(p *V) = lookup_ref(h, key) {
    return Has(*p);
  }
  return None;
}

func[K, V] lookup_sole_value(h *hash[K, V], expected *K) opt[V] {
  check(count(h) <= 1);
  it hash_iter[K, V] = iter(h);
  if case Has(p *tup[K, V]) = next(&it) {
    check(hash_equal(&p->car, expected));
    return Has(p->cdr);
  } else {
    return None;
  }
}

func[K, V] member(h *hash[K, V], key *K) bool {
  return isHas(lookup_ref(h, key));
}

// Returns an unstable reference -- use it right away.
func[K, V] try_insert_lookup(h *hash[K, V], key *K, value V) *V {
  switch lookup_ref(h, key) {
  case Has(p *V):
    return p;
  case None:
    ign var = try_insert(h, key, value);
    switch lookup_ref(h, key) {
    case Has(p *V):
      return p;
    case None:
      crash();
      return fake();
    }
  }
}

func[K, V] mk_hash() hash[K, V] {
  ret hash[K, V];
  return ret;
}

func[K, V] mk_hash(key K, value V) hash[K, V] {
  ret hash[K, V];
  check_insert(&ret, &key, value);
  return ret;
}

func[H, K, V] build_u8str(help H, r *array[u8], a *hash[K, V]) void {
  push(r, '{');
  notfirst bool = false;
  it hash_iter[K, V] = iter(a);
  while case Has(p *tup[K, V]) = next(&it) {
    if notfirst {
      push(r, ',');
    }
    notfirst = true;
    push(r, '(');
    build_u8str(help, r, &p->car);
    push(r, ',');
    build_u8str(help, r, &p->cdr);
    push(r, ')');
  }
  push(r, '}');
}

func[K, V] build_u8str(r *array[u8], a *hash[K, V]) void {
  build_u8str(void, r, a);
}

func hash_compute_hash(x *size) osize {
  return 0x23457813 * @[osize]+ *x;
}

inline func hash_equal(x *size, y *size) bool {
  return *x == *y;
}
