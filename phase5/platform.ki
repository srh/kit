import bigint;
import kitutil;
import shray;
import stdlib;

enum numeric_representation {
  Unsigned void;
  SignedTwos void;
}

enum shift_behavior {
  // When shifting, we merely range-check the RHS (that it's >= 0 and < bitsize), and
  // then we perform a bitshift that,
  //   - for right shifting, is
  //      -- logical, if repr is Unsigned
  //      -- arithmetic, if repr is SignedTwos
  //   - for left shifting, does not care about overflow
  //      -- if repr is Unsigned, this has simple and straightforward consequences
  //      -- if repr is SignedTwos, shifting can change the sign bit
  // We range-check the RHS even if it has trap_overflow false.
  JustRangecheckRhs void;
}

struct numeric_traits {
  repr numeric_representation;
  shifting shift_behavior;
  trap_overflow bool;
  minval bigint;
  maxval bigint;
}

struct flat_traits {
  size u32;
  alignment u32;
}

struct integral_traits {
  flat flat_traits;
  numeric numeric_traits;
}

def enum_tag_offset u32 = 0;
def enum_tag_min u32 = 1;

enum endianness {
  LittleEndian void;
}

func `==`(x endianness, y endianness) bool { return enumnum(&x) == enumnum(&y); }
func `!=`(x endianness, y endianness) bool { return enumnum(&x) != enumnum(&y); }

func check_littleendian(plat *platform_info) void {
  if plat->endian != LittleEndian {
    ice(_u8("check_littleendian fail"));
  }
}

enum platform_os {
  Linux32 void;
  Win32 void;
  Osx32 void;
}

func `==`(x platform_os, y platform_os) bool { return enumnum(&x) == enumnum(&y); }
func `!=`(x platform_os, y platform_os) bool { return enumnum(&x) != enumnum(&y); }

enum universal_calling_convention {
  UniversalCdeclConvention void;
}

struct platform_info {
  endian endianness;
  min_stackvar_alignment u32;
  // How many bits are in a byte (not necessarily octet)?
  bnno_size u32;
  enum_tag_size u32;

  voidtraits flat_traits;
  booltraits flat_traits;
  i8traits integral_traits;
  u8traits integral_traits;
  o8traits integral_traits;
  i16traits integral_traits;
  u16traits integral_traits;
  o16traits integral_traits;
  i32traits integral_traits;
  u32traits integral_traits;
  o32traits integral_traits;
  difftraits integral_traits;
  sizetraits integral_traits;
  osizetraits integral_traits;
  ptrtraits flat_traits;
  fntraits flat_traits;

  opsys platform_os;
  // There's no such thing as a universal calling convention, and as soon as this fiction
  // goes away we'll remove/change this.
  callconv universal_calling_convention;
}

enum callconv_reg_style {
  // Size based, uses eax:edx for 0, 1, 2, 4, 8.
  /* TODO: This (on Windows) might be like RecursiveSizeBased, only arrays are treated as
  individual elements. */
  SizeBased void;
  // Size based, uses eax:edx, but elems must be reg-style too, where an array "char x[3]"
  // counts as a single elem (thus size 3 implies we must use HRP).
  RecursiveSizeBased void;
  // Uses HRP for any non-primitive type.
  PrimitiveBased void;
}

// Do we do a ret4 when there's an HRP?
enum callconv_ret_style {
  Ret4Style void;
  RetStyle void;
}

struct callconv {
  reg_style callconv_reg_style;
  ret_style callconv_ret_style;
}

func callconv_style(p *platform_info) callconv {
  switch p->opsys {
  case Linux32: return {PrimitiveBased, Ret4Style};
  case Win32: return {SizeBased, RetStyle};
  case Osx32: return {RecursiveSizeBased, Ret4Style};
  }
}
