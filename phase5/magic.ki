import ast;
import box;
import deferred;
import identmap;
import kitutil;
import shp;
import typeexpr;
import u8ast;

struct magic_struct_info {
  cu_type cu_typeexpr;
  cu_props type_properties;
  st structspec;
  psd partial_struct_data;
  fips array[opt[instpair]];
}

struct magic_enum_info {
  cu_type cu_typeexpr;
  cu_props type_properties;
  et enumspec;
  et_constructor_props array[type_properties];
  cips array[opt[instpair]];
}

struct magic_arraytype_info {
  cu_type cu_typeexpr;
  cu_props type_properties;
  param_props type_properties;
  ip instpair;
}

enum magic_ctor_info {
  // These are None for fields that are trivially constructed.  But of course one field is
  // not None.
  MagicStructInfo magic_struct_info;
  MagicEnumInfo magic_enum_info;
  MagicArraytypeInfo magic_arraytype_info;
}

struct magic_ctor {
  type te_typeexpr;
  info nc[magic_ctor_info];
}

struct copy_destroy_desc {
  copy_desc ctor_desc;
  destroy_desc ctor_desc;
}

// This'll be obsolete as soon as we construct enums inline.
enum magic_enum_construct_op {
  EnumConstructMove ctor_desc;
  EnumConstructCopyDestroy copy_destroy_desc;
}

struct magic_enum_construct {
  et enumspec;
  return_type cu_typeexpr;
  return_type_props type_properties;
  constructor_index size;
  rhs_props type_properties;
  operational magic_enum_construct_op;
}

struct non_magic_ctor_info {
  cu_type cu_typeexpr;
  cu_props type_properties;
  ip instpair;
}

struct non_magic_ctor {
  type te_typeexpr;
  info nc[non_magic_ctor_info];
}

struct magic_bzero {
  // size of buf to bzero in bnnos.
  size nc[u32];
}

struct magic_memcopy {
  // size of buf to memcopy in bnnos.
  size nc[u32];
}

struct which_non_magic_ctor {
  wc which_ctor;
  nmc non_magic_ctor;
}

enum which_prop {
  PropSizeof void;
  PropAlignof void;
}

struct non_magic_prop {
  wp which_prop;
  type te_typeexpr;
  info nc[u32];
}

// Used for DefnNonMagic in def_definition in def_entry.
// Used for InstRhsNonMagic in def_inst_rhs in def_inst, maybe with generics replaced?
enum def_non_magic {
  NonMagicCtor which_non_magic_ctor;
  NonMagicProp non_magic_prop;
}

struct which_magic_ctor {
  wc which_ctor;
  mc magic_ctor;
}

// Used for DefnMagic in def_definition in def_entry.
// Used for InstRhsMagic in def_inst_rhs in def_inst, maybe with generics replaced?
enum def_magic {
  MagicBzero magic_bzero;
  MagicMemcopy magic_memcopy;
  MagicNopdestroy void;
  MagicCtor which_magic_ctor;
  MagicEnumConstruct magic_enum_construct;
}

enum which_ctor {
  CtorInit void;
  CtorCopy void;
  CtorMove void;
  CtorDestroy void;
}

func `==`(x which_ctor, y which_ctor) bool {
  return enumnum(&x) == enumnum(&y);
}

func num_args(wc which_ctor) size {
  switch wc {
  case CtorInit: return 1;
  case CtorCopy: return 2;
  case CtorMove: return 2;
  case CtorDestroy: return 1;
  }
}

func check_non_magic(clq *clqueue, g te_generik_scope, parms *idy_repls, nonmag *def_non_magic) np {
  switch nonmag {
  case &NonMagicCtor(wnmc which_non_magic_ctor):
    return check_non_magic_ctor(clq, g, parms, wnmc.wc, &wnmc.nmc);
  case &NonMagicProp(nmp non_magic_prop):
    return check_non_magic_prop(clq, g, parms, &nmp);
  }
}

func check_non_magic_prop(clq *clqueue, g te_generik_scope, parms *idy_repls, nmp *non_magic_prop) np {
  cac cac_typeexpr;
  #check_and_compute_typeexpr(clq, g, parms, &nmp->type, &cac);
  check(cac.complete);

  cac_props type_properties;
  #compute_complete_type_properties(clq, &cac.te, &cac_props);

  switch nmp->wp {
  case PropSizeof:
    annotate(&nmp->info, cac_props.flat_size);
  case PropAlignof:
    annotate(&nmp->info, cac_props.flat_alignment);
  }
  return NoFail;
}

func padding_oneparm_size(cs *checkstate, parms *idy_repls) u32 {
  check(count(&parms->tys) == 1);
  return unwrap_primitive_padding_type_size(cs, ref(&parms->tys, 0));
}

func check_magic(clq *clqueue, g te_generik_scope, parms *idy_repls, mag *def_magic) np {
  switch mag {
    case &MagicBzero(mb magic_bzero):
      annotate(&mb.size, padding_oneparm_size(clq->cs, parms));
      return NoFail;
    case &MagicMemcopy(mm magic_memcopy):
      annotate(&mm.size, padding_oneparm_size(clq->cs, parms));
      return NoFail;
    case &MagicNopdestroy:
      // Nothing to check.
      return NoFail;

    case &MagicCtor(wmc which_magic_ctor):
      return check_magic_ctor(clq, g, parms, wmc.wc, &wmc.mc);
    case &MagicEnumConstruct(me magic_enum_construct):
      // Nothing to check.
      return NoFail;
  }
}

func check_non_magic_ctor(clq *clqueue, g te_generik_scope, parms *idy_repls, wc which_ctor, nmc *non_magic_ctor) np {
  cac cac_typeexpr;
  #check_and_compute_typeexpr(clq, g, parms, &nmc->type, &cac);
  check(cac.complete);

  cac_props type_properties;
  #compute_complete_type_properties(clq, &cac.te, &cac_props);

  beh *derived_method_behavior = select_behavior(wc, &cac_props);
  oip opt[instpair] = instpair_or_trivial_from_behavior(beh);
  if case Has(ip instpair) = oip {
    annotate(&nmc->info, {~cac.te, cac_props, ip});
  } else {
    switch wc {
    case CtorInit:
      ip instpair = make_magic_bzero(clq, cac_props.flat_size);
      annotate(&nmc->info, {~cac.te, cac_props, ip});
    case CtorCopy:
      ip instpair = make_magic_memcopy(clq, cac_props.flat_size);
      annotate(&nmc->info, {~cac.te, cac_props, ip});
    case CtorMove:
      ip instpair = make_magic_memcopy(clq, cac_props.flat_size);
      annotate(&nmc->info, {~cac.te, cac_props, ip});
    case CtorDestroy:
      ip instpair = make_magic_nopdestroy(clq, cac_props.flat_size);
      annotate(&nmc->info, {~cac.te, cac_props, ip});
    }
  }

  return NoFail;
}

func make_magic_bzero(clq *clqueue, size u32) instpair {
  type te_typeexpr = primitive_padding_type(clq->cs, size);
  return make_magic_inst(clq, clq->im->cym.magic_bzero, 1, &type);
}
func make_magic_memcopy(clq *clqueue, size u32) instpair {
  type te_typeexpr = primitive_padding_type(clq->cs, size);
  return make_magic_inst(clq, clq->im->cym.magic_memcopy, 2, &type);
}
func make_magic_nopdestroy(clq *clqueue, size u32) instpair {
  type te_typeexpr = primitive_padding_type(clq->cs, size);
  return make_magic_inst(clq, clq->im->cym.magic_nopdestroy, 1, &type);
}

func check_magic_ctor(clq *clqueue, g te_generik_scope, parms *idy_repls, wc which_ctor, mc *magic_ctor) np {
  cac cac_typeexpr;
  #check_and_compute_typeexpr(clq, g, parms, &mc->type, &cac);
  check(cac.complete);

  cac_props type_properties;
  #compute_complete_type_properties(clq, &cac.te, &cac_props);

  switch &cac.te {
  case &TeName(a te_name):
    if case &Has(p te_instpack) = &a.pack {
      info magic_ctor_info;
      #check_pack_ctor(clq, &cac.te, &cac_props, &p, wc, &info);
      annotate(&mc->info, info);
    } else {
      ice(_u8("check_magic_ctor packless name type"));
    }
  case &TeApp(a te_app):
    if case &Has(p te_app_pack) = &a.pack {
      info magic_ctor_info;
      #check_pack_ctor(clq, &cac.te, &cac_props, &p.teip, wc, &info);
      annotate(&mc->info, info);
    } else {
      ice(_u8("check_magic_ctor packless app type"));
    }
  case &TeUnion(a te_union):
    ice(_u8("check_magic_ctor seeing TeUnion"));
  case &TeArraytype(a te_arraytype):
    props type_properties;
    #compute_complete_type_properties(clq, oo(&a.param), &props);
    annotate(&mc->info, @[magic_ctor_info]MagicArraytypeInfo({~cac.te, cac_props, props, instpair_from_behavior(select_behavior(wc, &props))}));
  case &TeUnknown:
    ice(_u8("check_magic_ctor seeing TeUnknown"));
  }

  return NoFail;
}

func check_vardecl_ctor(clq *clqueue, ds *shray[te_vardecl], wc which_ctor, insts_out *array[opt[instpair]]) np {
  insts array[opt[instpair]];
  nds size = count(ds);
  for i size = 0; i < nds; i = i + 1 {
    props type_properties;
    #compute_complete_type_properties(clq, &ds[i].type, &props);
    oip opt[instpair] = instpair_or_trivial_from_behavior(select_behavior(wc, &props));
    push(&insts, oip);
  }
  *insts_out = insts;
  return NoFail;
}

func pack_rhs_info(clq *clqueue, p *te_instpack, rhs_info_out **deftype_inst_rhs_info) np {
  info *deftype_inst_info;
  #compute_pack_info(clq, p, &info);
  if case &Has(rhs_info deftype_inst_rhs_info) = &info->rhs {
    *rhs_info_out = &rhs_info;
    return NoFail;
  } else {
    ice(_u8("check_pack_ctor on primitive type"));
    return fake();
  }
}

func instpair_from_behavior(b *derived_method_behavior) instpair {
  if case Has(ip instpair) = instpair_or_trivial_from_behavior(b) {
    return ip;
  } else {
    ice(_u8("instpair_from_behavior sees trivial"));
    return fake();
  }
}

func instpair_or_trivial_from_behavior(b *derived_method_behavior) opt[instpair] {
  switch b {
  case &DerivedMethodAbsent:
    ice(_u8("instpair_or_trivial_from_behavior sees absent"));
    return fake();
  case &DerivedMethodExplicit(dme derived_method_explicit):
    return Has(dme.ip);
  case &DerivedMethodNontrivial(ip instpair):
    return Has(ip);
  case &DerivedMethodTrivial:
    return None;
  }
}

func check_pack_ctor(clq *clqueue, complete_te *te_typeexpr, props *type_properties, p *te_instpack, wc which_ctor, info_out *magic_ctor_info) np {
  rhs_info *deftype_inst_rhs_info;
  #pack_rhs_info(clq, p, &rhs_info);
  switch rhs_info {
  case &RhsStructInfo(ri1 structspec):
    ri structspec = ri1;

    field_insts array[opt[instpair]];
    #check_vardecl_ctor(clq, &ri.fields, wc, &field_insts);

    psd partial_struct_data;
    #compute_partial_struct_data(clq, &ri.fields, None, &psd);

    *info_out = MagicStructInfo({~ *complete_te, *props, ri, move(&psd), field_insts});
  case &RhsEnumInfo(ri1 enumspec):
    ri enumspec = ri1;

    field_insts array[opt[instpair]];
    #check_vardecl_ctor(clq, &ri.constructors, wc, &field_insts);
    constructor_props array[type_properties];
    #compute_complete_vardecl_properties(clq, &ri.constructors, &constructor_props);

    *info_out = MagicEnumInfo({~ *complete_te, *props, ri, move(&constructor_props), field_insts});
  }
  return NoFail;
}

func select_behavior(wc which_ctor, props *type_properties) *derived_method_behavior {
  switch wc {
  case CtorInit:
    return &props->init_behavior;
  case CtorCopy:
    return &props->copy_behavior;
  case CtorMove:
    return &props->move_behavior;
  case CtorDestroy:
    return &props->destroy_behavior;
  }
}

func magic_name(im *identmap, wc which_ctor) sym {
  switch wc {
  case CtorInit: return im->cym.magic_init;
  case CtorCopy: return im->cym.magic_copy;
  case CtorMove: return im->cym.magic_move;
  case CtorDestroy: return im->cym.magic_destroy;
  }
}
