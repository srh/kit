import eval;

func st_eval_prim_op(clq *clqueue, env *st_env, paramorefs *array[st_obj_ref], retvalref st_obj_ref, primop *primitive_op) np {
  switch primop {
  case &PrimNum(a primitive_numeric_op):
    return st_eval_prim_num(clq, env, paramorefs, retvalref, &a);
  case &PrimNumCompare(a primitive_numeric_comparison_op):
    return st_eval_prim_num_compare(clq, env, paramorefs, retvalref, &a);
  case &PrimLogical(a primitive_logical_op):
    return st_eval_prim_logical(clq, env, paramorefs, retvalref, a);
  case &PrimPtrCompare(a primitive_ptr_comparison_op):
    return st_eval_prim_ptr_compare(clq, env, paramorefs, retvalref, &a);
  case &PrimConversion(a primitive_conversion_op):
    return st_eval_prim_conversion(clq, env, paramorefs, retvalref, &a);
  }
}

func st_eval_prim_conversion(clq *clqueue, env *st_env, paramorefs *array[st_obj_ref], retvalref st_obj_ref, op *primitive_conversion_op) np {
  ps array[bigint];
  // Conversion operators have arity 1.
  if case Printed(pm) = st_nums(env, paramorefs, 1, op->from_size, op->from_numtraits.repr, &ps) {
    return Printed(pm);
  }
  if retvalref.count != op->to_size {
    ice(_u8("st_eval_prim_conversion bad retvalref size"));
  }

  // We don't trap overflow if _either_ numeric type is non-trapping.
  nevertrap never_trap;
  if op->from_numtraits.trap_overflow {
    nevertrap = NeverTrapNo;
  } else {
    nevertrap = NeverTrapYes;
  }
  return st_num_rangechecked_output(clq, env, retvalref, get(&ps, 0), op->to_size, &op->to_numtraits, nevertrap);
}

func st_eval_prim_logical(clq *clqueue, env *st_env, paramorefs *array[st_obj_ref], retvalref st_obj_ref, op primitive_logical_op) np {
  ps array[bigint];
  if case Printed(pm) = st_nums(env, paramorefs, op_arity(op), env->plat.bnno_size, Unsigned, &ps) {
    return Printed(pm);
  }
  if retvalref.count != env->plat.booltraits.size {
    ice(_u8("st_eval_prim_logical bad retvalref size"));
  }

  result bool;
  switch op {
  case LogicalNot:
    result = bigu(0) == get(&ps, 0);
  case BoolEq:
    result = get(&ps, 0) == get(&ps, 1);
  case BoolNe:
    result = get(&ps, 0) != get(&ps, 1);
  case BoolBitAnd:
    result = (get(&ps, 0) == bigu(1) && get(&ps, 1) == bigu(1));
  case BoolBitOr:
    result = (get(&ps, 0) == bigu(1) || get(&ps, 1) == bigu(1));
  }
  resultint bigint;
  if result {
    resultint = bigu(1);
  } else {
    resultint = bigu(0);
  }
  val st_value = st_bigint_to_value_unsigned(&env->plat, retvalref.count, resultint);
  if case Printed(pm) = obj_write(env, retvalref, &val) {
    ice(_u8("st_eval_prim_logical cannot write into retvalref"));
  }
  return NoFail;
}

func st_eval_prim_ptr_compare(clq *clqueue, env *st_env, paramorefs *array[st_obj_ref], retvalref st_obj_ref, op *primitive_ptr_comparison_op) np {
  vals array[st_value];
  if case Printed(pm) = st_values(env, paramorefs, 2, env->plat.ptrtraits.size, &vals) {
    return Printed(pm);
  }
  if retvalref.count != env->plat.booltraits.size {
    ice(_u8("st_eval_prim_ptr_compare bad retvalref size"));
  }
  a st_pointer;
  b st_pointer;
  if case Printed(pm) = st_value_as_pointer(&env->plat, ref(&vals, 0), &a) {
    return Printed(pm);
  }
  if case Printed(pm) = st_value_as_pointer(&env->plat, ref(&vals, 1), &b) {
    return Printed(pm);
  }
  result bool;
  switch op->op_action {
  case CmpEq:
    result = a.num == b.num && a.offset == b.offset;
  case CmpNe:
    result = a.num != b.num || a.offset != b.offset;
  default:
    if a.num != b.num {
      return ERR(_u8("Static eval cross-object pointer comparison."));
    }
    switch op->op_action {
    case CmpLt:
      result = a.offset < b.offset;
    case CmpGt:
      result = a.offset > b.offset;
    case CmpLe:
      result = a.offset <= b.offset;
    case CmpGe:
      result = a.offset >= b.offset;
    }
  }
  // TODO: This could be deduped in this file.
  resultint bigint;
  if result {
    resultint = bigu(1);
  } else {
    resultint = bigu(0);
  }
  val st_value = st_bigint_to_value_unsigned(&env->plat, retvalref.count, resultint);
  if case Printed(pm) = obj_write(env, retvalref, &val) {
    ice(_u8("st_eval_prim_ptr_compare cannot write into retvalref"));
  }
  return NoFail;
}

func st_eval_prim_num_compare(clq *clqueue, env *st_env, paramorefs *array[st_obj_ref], retvalref st_obj_ref, op *primitive_numeric_comparison_op) np {
  ps array[bigint];
  // Comparison ops all take 2 arguments.
  if case Printed(pm) = st_nums(env, paramorefs, 2, op->op_size, op->op_numtraits.repr, &ps) {
    return Printed(pm);
  }
  if retvalref.count != env->plat.booltraits.size {
    ice(_u8("st_eval_prim_num_compare bad retvalref size"));
  }

  a bigint = get(&ps, 0);
  b bigint = get(&ps, 1);
  result bool;
  switch op->op_action {
  case CmpEq: result = a == b;
  case CmpNe: result = a != b;
  case CmpLt: result = a < b;
  case CmpGt: result = a > b;
  case CmpLe: result = a <= b;
  case CmpGe: result = a >= b;
  }
  resultint bigint;
  if result {
    resultint = bigu(1);
  } else {
    resultint = bigu(0);
  }
  val st_value = st_bigint_to_value_unsigned(&env->plat, retvalref.count, resultint);
  if case Printed(pm) = obj_write(env, retvalref, &val) {
    ice(_u8("st_eval_prim_num_compare cannot write into retvalref"));
  }
  return NoFail;
}

func st_eval_prim_num(clq *clqueue, env *st_env, paramorefs *array[st_obj_ref], retvalref st_obj_ref, op *primitive_numeric_op) np {
  ps array[bigint];
  if case Printed(pm) = st_nums(env, paramorefs, op_arity(op->op_action), op->op_size, op->op_numtraits.repr, &ps) {
    return Printed(pm);
  }
  if retvalref.count != op->op_size {
    ice(_u8("st_eval_prim_arith bad retvalref size"));
  }

  switch op->op_action {
  case NumAdd:
    return st_num_rangechecked_output(clq, env, retvalref, add(ref(&ps, 0), ref(&ps, 1)), op);
  case NumSub:
    return st_num_rangechecked_output(clq, env, retvalref, get(&ps, 0) - get(&ps, 1), op);
  case NumMul:
    return st_num_rangechecked_output(clq, env, retvalref, multiply(ref(&ps, 0), ref(&ps, 1)), op);
  case NumDiv:
    // TODO: This does not have x86-compatible (or platform-compatible) behavior for signed division.
    div_result bigint;
    mod_discard bigint;
    if case Printed(pm) = st_divmod(get(&ps, 0), get(&ps, 1), op, &div_result, &mod_discard) {
      return Printed(pm);
    }
    return st_num_rangechecked_output(clq, env, retvalref, div_result, op);
  case NumMod:
    // TODO: This does not have x86-compatible (or platform-compatible) behavior for signed division.
    div_discard bigint;
    mod_result bigint;
    if case Printed(pm) = st_divmod(get(&ps, 0), get(&ps, 1), op, &div_discard, &mod_result) {
      return Printed(pm);
    }
    return st_num_rangechecked_output(clq, env, retvalref, mod_result, op);
  case NumNegate:
    return st_num_rangechecked_output(clq, env, retvalref, - get(&ps, 0), op);
  case NumBitAnd:
    return st_num_rangechecked_output(clq, env, retvalref, get(&ps, 0) & get(&ps, 1), op);
  case NumBitOr:
    return st_num_rangechecked_output(clq, env, retvalref, get(&ps, 0) | get(&ps, 1), op);
  case NumBitXor:
    return st_num_rangechecked_output(clq, env, retvalref, get(&ps, 0) ^ get(&ps, 1), op);
  case NumBitNot:
    return st_num_rangechecked_output(clq, env, retvalref, ^get(&ps, 0), op, NeverTrapYes);
  case NumShiftLeft:
    switch op->op_numtraits.shifting {
    case JustRangecheckRhs:
      bitsize u32 = op->op_size * env->plat.bnno_size;
      rhs bigint = get(&ps, 1);
      rhs32 u32;
      if !as_non_negative_u32(&rhs, &rhs32) || rhs32 >= bitsize {
        return ERR(_u8("Leftshift rhs out of range"));
      }
      return st_num_rangechecked_output(clq, env, retvalref, get(&ps, 0) << rhs32, op, NeverTrapYes);
    }
  case NumShiftRight:
    switch op->op_numtraits.shifting {
    case JustRangecheckRhs:
      bitsize u32 = op->op_size * env->plat.bnno_size;
      rhs bigint = get(&ps, 1);
      rhs32 u32;
      if !as_non_negative_u32(&rhs, &rhs32) || rhs32 >= bitsize {
        return ERR(_u8("Rightshift rhs out of range"));
      }
      return st_num_rangechecked_output(clq, env, retvalref, get(&ps, 0) >> rhs32, op, NeverTrapYes);
    }
  }
}

func st_divmod(x bigint, y bigint, op *primitive_numeric_op, div_out *bigint, mod_out *bigint) np {
  if y == bigu(0) {
    return ERR(_u8("Static eval: divide by zero"));
  }
  switch op->op_numtraits.repr {
  case Unsigned: { }
  case SignedTwos:
    if y == -bigu(1) && x == op->op_numtraits.minval {
      return ERR(_u8("Static eval: divide minval by -1"));
    }
  }
  dm tup[bigint, bigint] = divmod(x, y);
  // If numerator is negative, twiddle result to obey "official" SignedTwos (x86) semantics.  divmod already handles the x>0, y>0 case (duh) and the x>0, y<0 case correctly.
  if dm.cdr != bigu(0) && is_negative(&x) {
    if is_negative(&y) {
      // div is positive, we need it smaller.
      dm.car = dm.car - bigu(1);
      // lessens the remainder
      dm.cdr = dm.cdr + y;
    } else {
      // div is negative, we need it bigger.
      dm.car = incr(dm.car);
      // lessens the remainder
      dm.cdr = dm.cdr - y;
    }
  }
  *div_out = dm.car;
  *mod_out = dm.cdr;
  return NoFail;
}

// Says that we should _not_ trap on overflow -- used for bitwise ops where it's possible and OK to overflow (namely, bitwise not).
enum never_trap {
  NeverTrapNo void;
  NeverTrapYes void;
}

func st_num_rangechecked_output(clq *clqueue, env *st_env, retvalref st_obj_ref, num bigint, op *primitive_numeric_op) np {
  return st_num_rangechecked_output(clq, env, retvalref, num, op, NeverTrapNo);
}

func st_num_rangechecked_output(clq *clqueue, env *st_env, retvalref st_obj_ref, num bigint, op *primitive_numeric_op, nevertrap never_trap) np {
  return st_num_rangechecked_output(clq, env, retvalref, num, op->op_size, &op->op_numtraits, nevertrap);
}

func st_num_rangechecked_output(clq *clqueue, env *st_env, retvalref st_obj_ref, num bigint, op_size u32, op_numtraits *numeric_traits, nevertrap never_trap) np {
  if num < op_numtraits->minval || num > op_numtraits->maxval {
    if case NeverTrapNo = nevertrap {
      if op_numtraits->trap_overflow {
        return ERR(_u8("Result out of range."));
      }
    }
    // Make sure we know to handle some weird reprs later when we have them.
    switch op_numtraits->repr {
    case Unsigned: { }
    case SignedTwos: { }
    }
    addand bigint = incr(op_numtraits->maxval - op_numtraits->minval);
    num = ((num - op_numtraits->minval) % addand) + op_numtraits->minval;
  }

  val st_value;
  if !st_bigint_to_value_twos(&env->plat, op_size, num, &val) {
    ice(_u8("st_num_rangechecked_input just rangechecked bigint, could not convert to st_value."));
  }
  if case Printed(pm) = obj_write(env, retvalref, &val) {
    return Printed(pm);
  }
  return NoFail;
}

func st_values(env *st_env, paramorefs *array[st_obj_ref], op_arity u32, op_size u32, out *array[st_value]) np {
  nparams size = count(paramorefs);
  if op_arity != ~nparams {
    ice(_u8("st_nums numeric op bad arity"));
  }
  ret array[st_value];
  for i size = 0; i < nparams; i = i + 1 {
    oref st_obj_ref = get(paramorefs, i);
    if oref.count != op_size {
      ice(_u8("st_nums bad operand size"));
    }
    val st_value;
    if case Printed(pm) = obj_read(env, oref, &val) {
      return Printed(pm);
    }
    push(&ret, val);
  }
  *out = ret;
  return NoFail;
}

func st_nums(env *st_env, paramorefs *array[st_obj_ref], op_arity u32, op_size u32, repr numeric_representation, out *array[bigint]) np {
  vals array[st_value];
  if case Printed(pm) = st_values(env, paramorefs, op_arity, op_size, &vals) {
    return Printed(pm);
  }
  ret array[bigint];
  nparams size = count(&vals);
  for i size = 0; i < nparams; i = i + 1 {
    oref st_obj_ref = get(paramorefs, i);
    if oref.count != op_size {
      ice(_u8("st_nums bad operand size"));
    }
    val st_value;
    if case Printed(pm) = obj_read(env, oref, &val) {
      return Printed(pm);
    }

    num bigint;
    switch repr {
    case Unsigned:
      if case Printed(pm) = st_value_unsigned_as_bigint(&env->plat, ref(&vals, i), &num) {
        return Printed(pm);
      }
    case SignedTwos:
      if case Printed(pm) = st_value_signed_twos_as_bigint(&env->plat, ref(&vals, i), &num) {
        return Printed(pm);
      }
    }
    push(&ret, num);
  }
  *out = ret;
  return NoFail;
}
