import array;
import build;
import graph;
import io;
import parse;
import stdlib;
import string;
import test_check;

func run_tests(verbose bool, build bool) bool {
  test_parse_passed bool = test_parse(verbose);
  if test_parse_passed {
    print(Stdout(), _u8("parse_test passes\n"));
  } else {
    print(Stdout(), _u8("parse_test FAIL\n"));
  }
  ign var = fflush(Stdout());
  test_check_res tup[bool, u32] = test_check(verbose, build);
  if test_check_res.car {
    print(Stdout(), _u8("check_test passes\n"));
  } else {
    print(Stdout(), _u8("check_test FAIL ("), to_u8str(test_check_res.cdr), _u8(" failures)\n"));
  }
  ign = fflush(Stdout());
  test_bigint_passed bool = test_bigint(verbose);
  if test_bigint_passed {
    print(Stdout(), _u8("check_bigint passes\n"));
  } else {
    print(Stdout(), _u8("check_bigint FAIL\n"));
  }
  ign = fflush(Stdout());
  all_success bool = test_parse_passed && test_check_res.car && test_bigint_passed;
  if all_success {
    print(Stdout(), _u8("All tests PASS!\n"));
  } else {
    print(Stdout(), _u8("FAIL FAIL FAIL\n"));
  }
  ign = fflush(Stdout());
  return all_success;
}

func file_loader(cs *checkstate, name sym, out *array[u8]) bool {
  ns array[u8] = to_u8str(lookup(cs->im, name));
  return read_file(concat(ns, _u8(".ki")), out);
}

func run_on_file(plat platform_info, modulename array[u8]) bool {
  if ends_with(_u8(".ki"), modulename) {
    truncate(&modulename, count(&modulename) - 3);
    print(Stderr(), _u8("(Removed '.ki' suffix...)\n"));
  }
  im identmap = make_im();
  cs checkstate = make_checkstate(&im, plat, null, file_loader);
  add_primitives(&cs);
  if !from_np(build_module(&cs, intern(&im, from_u8(modulename)))) {
    print(Stdout(), _u8("Failed.\n"));
    ign var = fflush(Stdout());
    return false;
  } else {
    return true;
  }
}

// TODO: c_int
export func main(argc i32, argv * ^[0]* ^[0]u8) i32 {
  args array[array[u8]];
  for i i32 = 0; i < argc; i = i + 1 {
    push(&args, lpz_as_u8str(argv[~i]));
  }
  return main_u8(&args);
}

func main_u8(args *array[array[u8]]) i32 {
  argc size = count(args);
  if argc == 1 {
    if !run_tests(false, true) {
      return 1;
    }
  } else if argc == 2 {
    // There's no way to get no-build but non-verbose.  That's fine with me.
    if u8_equal(get(args, 1), _u8("--no-build")) {
      if !run_tests(true, false) {
        return 1;
      }
    } else if u8_equal(get(args, 1), _u8("--build")) {
      if !run_tests(true, true) {
        return 1;
      }
    } else {
      if !run_on_file(x86_win32_platform(), get(args, 1)) {
        return 1;
      }
    }
  } else if argc == 3 && u8_equal(get(args, 1), _u8("--linux")) {
    if !run_on_file(x86_linux32_platform(), get(args, 2)) {
      return 1;
    }
  } else if argc == 3 && u8_equal(get(args, 1), _u8("--osx")) {
    if !run_on_file(x86_osx32_platform(), get(args, 2)) {
      return 1;
    }
  } else {
    print(Stderr(), _u8("Usage: "), get(args, 0), _u8(" [[--linux] <module>]\n"));
    return 1;
  }

  return 0;
}
