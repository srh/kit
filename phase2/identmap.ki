import hash;
import string;
import stdlib;

struct sym { x size; }

def `~` fn[size, sym] = wrapconvert;

inline func `==`(x sym, y sym) bool {
  return x.x == y.x;
}
inline func `!=`(x sym, y sym) bool {
  return x.x != y.x;
}

inline func hash_compute_hash(x *sym) osize {
  return ~x->x;
}

inline func hash_equal(x *sym, y *sym) bool {
  return x->x == y->x;
}

defclass[T] copy symmap {
  // A map from T's to ident values.
  table hash[T, sym];
  // A map from ident values to T's.
  backmap array[T];
}

access symmap[_] {
  inline func[T] do_init(im *symmap[T]) void {
    init(&im->table);
    init(&im->backmap);
  }

  func[T] intern(im *symmap[T], s T) sym {
    val size = count(&im->backmap);
    if try_insert(&im->table, &s, ~val) {
      push(&im->backmap, s);
      return ~val;
    } else {
      switch lookup(&im->table, &s) {
        case Has(value): {
          return value;
        }
      }
    }
  }

  inline func[T] is_interned(im *symmap[T], s T) opt[sym] {
    return lookup(&im->table, &s);
  }

  inline func[T] lookup(im *symmap[T], ident sym) T {
    return get(&im->backmap, ident.x);
  }
}

struct common_syms {
  fnsym sym;
  boolsym sym;
  voidsym sym;
  i8sym sym;
  u8sym sym;
  o8sym sym;
  i16sym sym;
  u16sym sym;
  o16sym sym;
  i32sym sym;
  u32sym sym;
  o32sym sym;
  diffsym sym;
  sizesym sym;
  osizesym sym;
  primitive_module_sym sym;
  ptrtype_sym sym;
  reftype_sym sym;
  lengthsym sym;
  tee_sym sym;
  uee_sym sym;
  derefsym sym;
  addressofsym sym;
  logical_and_sym sym;
  logical_or_sym sym;
  assignmentsym sym;
  convertsym sym;
  nonlossyconvertsym sym;
  init sym;
  copy sym;
  move sym;
  destroy sym;
  magic_bzero sym;
  magic_memcopy sym;
  magic_nopdestroy sym;
  magic_init sym;
  magic_copy sym;
  magic_move sym;
  magic_destroy sym;
  sizeofsym sym;
  alignofsym sym;
  postfix_incrsym sym;
  postfix_decrsym sym;
  fakesym sym;
  quickreturnsym sym;
}

struct identmap {
  sm symmap[string];
  cym common_syms;
}

func make_common_syms(im *symmap[string]) common_syms {
  ret common_syms;
  ret.fnsym = intern(im, _s("fn"));
  ret.boolsym = intern(im, _s("bool"));
  ret.voidsym = intern(im, _s("void"));
  ret.i8sym = intern(im, _s("i8"));
  ret.u8sym = intern(im, _s("u8"));
  ret.o8sym = intern(im, _s("o8"));
  ret.i16sym = intern(im, _s("i16"));
  ret.u16sym = intern(im, _s("u16"));
  ret.o16sym = intern(im, _s("o16"));
  ret.i32sym = intern(im, _s("i32"));
  ret.u32sym = intern(im, _s("u32"));
  ret.o32sym = intern(im, _s("o32"));
  ret.diffsym = intern(im, _s("diff"));
  ret.sizesym = intern(im, _s("size"));
  ret.osizesym = intern(im, _s("osize"));
  ret.primitive_module_sym = intern(im, _s("<primitive>"));
  ret.ptrtype_sym = intern(im, _s("*"));
  ret.reftype_sym = intern(im, _s("&"));
  ret.lengthsym = intern(im, _s("length"));
  ret.tee_sym = intern(im, _s("T"));
  ret.uee_sym = intern(im, _s("U"));
  ret.derefsym = intern(im, _s("*"));
  ret.addressofsym = intern(im, _s("&"));
  ret.logical_and_sym = intern(im, _s("&&"));
  ret.logical_or_sym = intern(im, _s("||"));
  ret.assignmentsym = intern(im, _s("="));
  ret.convertsym = intern(im, _s("~"));
  ret.nonlossyconvertsym = intern(im, _s("+"));
  ret.init = intern(im, _s("init"));
  ret.copy = intern(im, _s("copy"));
  ret.move = intern(im, _s("move"));
  ret.destroy = intern(im, _s("destroy"));
  ret.magic_bzero = intern(im, _s("$magic_bzero"));
  ret.magic_memcopy = intern(im, _s("$magic_memcopy"));
  ret.magic_nopdestroy = intern(im, _s("$magic_nopdestroy"));
  ret.magic_init = intern(im, _s("$magic_init"));
  ret.magic_copy = intern(im, _s("$magic_copy"));
  ret.magic_move = intern(im, _s("$magic_move"));
  ret.magic_destroy = intern(im, _s("$magic_destroy"));
  ret.sizeofsym = intern(im, _s("sizeof"));
  ret.alignofsym = intern(im, _s("alignof"));
  ret.postfix_incrsym = intern(im, _s("++"));
  ret.postfix_decrsym = intern(im, _s("--"));
  ret.fakesym = intern(im, _s("$fake"));
  ret.quickreturnsym = intern(im, _s("#"));
  return ret;
}

func make_im() identmap {
  ret identmap;
  ret.cym = make_common_syms(&ret.sm);
  return ret;
}

func intern(im *identmap, s string) sym {
  return intern(&im->sm, s);
}

func is_interned(im *identmap, s string) opt[sym] {
  return is_interned(&im->sm, s);
}

func lookup(im *identmap, ident sym) string {
  return lookup(&im->sm, ident);
}

func build_u8str(im *identmap, r *array[u8], a *sym) void {
  s string = lookup(im, *a);
  build_u8str(void, r, &s);
}

func build_u8str(nohelp void, r *array[u8], a *sym) void {
  build_u8str(nohelp, r, &a->x);
}

