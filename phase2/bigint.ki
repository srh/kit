import array;
import shray;

defclass copy bigint {
  negative bool;
  // We use a 2's complement representation.  (So -2 is represented by [0xFFFFFFFE], -1 is represented by [].)
  parts shray[u32];
}

access bigint {
  inline func do_init(b *bigint) void {
    init(&b->negative);
    init(&b->parts);
  }

  func mk(negative bool, parts shray[u32]) bigint {
    ret bigint;
    ret.negative = negative;
    ret.parts = parts;
    return ret;
  }

  func `~`(x u32) bigint {
    ret bigint;
    if x != 0 {
      ret.parts = mk_shray(x);
    }
    return ret;
  }

  func `~`(x i32) bigint {
    if x >= 0 {
      return ~(@[u32]~x);
    } else {
      y bigint = ~(@[u32]~((x + 0x40000000) + 0x40000000));
      z bigint = ~(@[u32]0x40000000);
      return (y - z) - z;
    }
  }

  func `+`(x bigint, y bigint) bigint {
    ret bigint;
    add(&x, &y, &ret);
    return ret;
  }

  func add(x *bigint, y *bigint) bigint {
    ret bigint;
    add(x, y, &ret);
    return ret;
  }

  func add(x *bigint, y *bigint, out *bigint) void {
    xn size = count(&x->parts);
    yn size = count(&y->parts);
    maxn size = max(xn, yn);
    build array[u32];
    reserve(&build, maxn + 1);
    carry u32 = 0;
    for i size = 0; i < maxn; i = i + 1 {
      xval u32 = getbigdigit(x, i);
      yval u32 = getbigdigit(y, i);
      oflow1 u32;
      sum u32;
      add_oflow(xval, yval, &sum, &oflow1);
      oflow2 u32;
      add_oflow(carry, sum, &sum, &oflow2);
      carry = oflow1 + oflow2;
      push(&build, sum);
    }
    if x->negative != y->negative {
      squash(carry == 0, &build, out);
    } else if x->negative {
      // Both negative.
      if carry == 0 {
        push(&build, 0xFFFFFFFE);
      }
      squash(true, &build, out);
    } else {
      // Both positive;
      if carry == 1 {
        push(&build, 1);
      }
      squash(false, &build, out);
    }
  }

  func bigdigit_count(x *bigint) size {
    return count(&x->parts);
  }

  // 32 bits.  (This is a u32, not a size, because s1 can't statically eval sizes.)
  def bigdigit_bits u32 = 32;

  func getbigdigit(x *bigint, i size) u32 {
    if i < count(&x->parts) {
      return get(&x->parts, i);
    } else {
      if x->negative {
        return ^ @[u32] 0;
      } else {
        return 0;
      }
    }
  }

  func as_non_negative_u32(x *bigint, out *u32) bool {
    if x->negative {
      return false;
    }
    n size = count(&x->parts);
    if n == 0 {
      *out = 0;
      return true;
    } else if n == 1 {
      *out = get(&x->parts, 0);
      return true;
    } else {
      return false;
    }
  }

  func as_i32(x *bigint, out *i32) bool {
    n size = count(&x->parts);
    if x->negative {
      if n == 0 {
        *out = -1;
        return true;
      } else if n == 1 {
        k u32 = get(&x->parts, 0);
        if 0 != (k & 0x80000000) {
          *out = (@[i32] ~(k - 0x80000000)) - 0x40000000 - 0x40000000;
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    } else {
      if n == 0 {
        *out = 0;
        return true;
      } else if n == 1 {
        k u32 = get(&x->parts, 1);
        if 0 == (k & 0x8000000) {
          *out = ~k;
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }

  func squash(negative bool, build *array[u32]) bigint {
    ret bigint;
    squash(negative, build, &ret);
    return ret;
  }

  func squash(negative bool, build *array[u32], out *bigint) void {
    val u32;
    if negative {
      val = ^ @[u32] 0;
    } else {
      val = 0;
    }
    n size = count(build);
    while n > 0 {
      n = n - 1;
      if get(build, n) != val {
        out->negative = negative;
        out->parts = freeze(build);
        return;
      }
      pop(build);
    }
    out->negative = negative;
    out->parts = freeze(build);
  }

  func add_to_array(x *array[u32], ix size, val u32) void {
    n size = count(x);
    while ix < n && val != 0 {
      add_oflow(get(x, ix), val, ref(x, ix), &val);
      ix = ix + 1;
    }
  }

  func swap(x *bigint, y *bigint) void {
    tmp bool = x->negative;
    x->negative = y->negative;
    y->negative = tmp;
    swap(&x->parts, &y->parts);
  }

  func multiply(x bigint, y bigint) bigint {
    ret bigint;
    multiply(&x, &y, &ret);
    return ret;
  }

  func multiply(x *bigint, y *bigint) bigint {
    ret bigint;
    multiply(x, y, &ret);
    return ret;
  }

  func multiply(x *bigint, y *bigint, out *bigint) void {
    xn size = count(&x->parts);
    yn size = count(&y->parts);
    if !(x->negative || y->negative || xn > 1 || yn > 1) {
      if xn == 0 || yn == 0 {
        ret bigint;
        swap(out, &ret);
        return;
      }
      x0 u32 = get(&x->parts, 0);
      y0 u32 = get(&y->parts, 0);
      if x0 <= 0xFFFF && y0 <= 0xFFFF {
        ret bigint;
        ret.parts = mk_shray(x0 * y0);
        swap(out, &ret);
        return;
      }
    }
    ressize size = xn + yn + 3;
    build array[u32] = repeat(ressize + 1, 0);
    carry u32 = 0;
    for i size = 0; i < ressize; i = i + 1 {
      for j size = 0; j < ressize - i; j = j + 1 {
        lo u32;
        hi u32;
        multiply_oflow(getbigdigit(x, i), getbigdigit(y, j), &lo, &hi);
        add_to_array(&build, i + j + 1, hi);
        add_to_array(&build, i + j, lo);
      }
    }
    signword u32 = get(&build, ressize - 2);
    if signword == 0 {
      pop(&build);
      squash(false, &build, out);
    } else if signword == ^ @[u32] 0 {
      pop(&build);
      squash(true, &build, out);
    } else {
      crash(_u8("bigint multiplication algorithm fail"));
    }
  }

  func abs(x bigint) bigint {
    if is_negative(&x) {
      return -x;
    } else {
      return x;
    }
  }

  func divmod(x bigint, y bigint) tup[bigint, bigint] {
    if y == ~ @[u32] 0 {
      crash(_u8("bigint divmod divide by zero"));
    }
    lo bigint = -abs(x);
    hi bigint = incr(abs(x));
    while hi > incr(lo) {
      m bigint = (lo + hi) >> 1;
      if multiply(&y, &m) <= x {
        lo = m;
      } else {
        hi = m;
      }
    }
    return {lo, x - multiply(&y, &lo)};
  }

  func `/`(x bigint, y bigint) bigint {
    return divmod(x, y).car;
  }

  func `%`(x bigint, y bigint) bigint {
    return divmod(x, y).cdr;
  }

  func add_oflow(x u32, y u32, sum_out *u32, carry_out *u32) void {
    xl u32 = (x & 0xFFFF);
    xh u32 = (x >> 16);
    yl u32 = (y & 0xFFFF);
    yh u32 = (y >> 16);
    q0 u32 = xl + yl;
    q1 u32 = xh + yh + (q0 >> 16);
    *sum_out = (((q1 & 0xFFFF) << 16) | (q0 & 0xFFFF));
    *carry_out = (q1 >> 16);
  }

  func multiply_oflow(x u32, y u32, lo_out *u32, hi_out *u32) void {
    xl u32 = (x & 0xFFFF);
    xh u32 = (x >> 16);
    yl u32 = (y & 0xFFFF);
    yh u32 = (y >> 16);
    p00 u32 = xl * yl;
    p01 u32 = xl * yh;
    p10 u32 = xh * yl;
    p11 u32 = xh * yh;

    q0 u32 = (p00 & 0xFFFF);
    q1 u32 = (p00 >> 16) + (p01 & 0xFFFF) + (p10 & 0xFFFF);
    q2 u32 = (p01 >> 16) + (p10 >> 16) + (p11 & 0xFFFF);
    q3 u32 = (p11 >> 16);

    q2 = q2 + (q1 >> 16);
    q3 = q3 + (q2 >> 16);

    *lo_out = (((q1 & 0xFFFF) << 16) | q0);
    *hi_out = (((q3 & 0xFFFF) << 16) | (q2 & 0xFFFF));
  }

  func `^`(x bigint) bigint {
    build array[u32];
    n size = count(&x.parts);
    for i size = 0; i < n; i = i + 1 {
      push(&build, ^get(&x.parts, i));
    }
    return mk(!x.negative, freeze(&build));
  }

  func incr(x bigint) bigint {
    build array[u32];
    carry u32 = 1;
    n size = count(&x.parts);
    i size = 0;
    for ; carry != 0 && i < n; i = i + 1 {
      p u32 = get(&x.parts, i);
      newp u32;
      add_oflow(carry, p, &newp, &carry);
      push(&build, newp);
    }
    for ; i < n; i = i + 1 {
      push(&build, get(&x.parts, i));
    }
    if x.negative {
      return squash(carry == 0, &build);
    } else {
      if carry != 0 {
        push(&build, carry);
      }
      return mk(x.negative, freeze(&build));
    }
  }

  func `-`(x bigint) bigint {
    y bigint = ^x;
    return incr(y);
  }

  func `-`(x bigint, y bigint) bigint {
    return x + - y;
  }

  func `>>`(x bigint, y u32) bigint {
    i size = ~(y / 32);
    yr u32 = y % 32;
    newparts array[u32];
    if yr == 0 {
      // We handle the yr == 0 case to avoid a shift-by-32.
      newparts = subarray(&x.parts, i);
    } else {
      ys u32 = 32 - yr;
      mask u32 = (@[u32] 1 << yr) - 1;
      nparts size = count(&x.parts);
      for ; i < nparts; i = i + 1 {
        valo u32 = get(&x.parts, i) >> yr;
        vahi u32 = (getbigdigit(&x, i + 1) & mask) << ys;
        push(&newparts, valo | vahi);
      }
    }
    return squash(x.negative, &newparts);
  }

  func `<<`(x bigint, y u32) bigint {
    wholewords size = ~(y / 32);
    yr u32 = y % 32;
    newparts array[u32] = repeat(wholewords, @[u32] 0);
    if yr == 0 {
      // We handle the yr == 0 case to avoid a shift-by-32.
      append_raw(&newparts, data(&x.parts), count(&x.parts));
    } else {
      ys u32 = 32 - yr;
      nparts size = count(&x.parts);
      for i size = 0; i < nparts + 1; i = i + 1 {
        valo u32;
        if i == 0 {
          valo = 0;
        } else {
          valo = get(&x.parts, i - 1) >> ys;
        }
        vahi u32 = getbigdigit(&x, i) << yr;
        push(&newparts, valo | vahi);
      }
    }
    return squash(x.negative, &newparts);
  }

  func `&`(x bigint, y bigint) bigint {
    n size = max(bigdigit_count(&x), bigdigit_count(&y));
    parts array[u32];
    for i size = 0; i < n; i = i + 1 {
      a u32 = getbigdigit(&x, i);
      b u32 = getbigdigit(&y, i);
      push(&parts, a & b);
    }
    return squash(x.negative && y.negative, &parts);
  }

  func `|`(x bigint, y bigint) bigint {
    n size = max(bigdigit_count(&x), bigdigit_count(&y));
    parts array[u32];
    for i size = 0; i < n; i = i + 1 {
      a u32 = getbigdigit(&x, i);
      b u32 = getbigdigit(&y, i);
      push(&parts, a | b);
    }
    return squash(x.negative || y.negative, &parts);
  }

  func `^`(x bigint, y bigint) bigint {
    n size = max(bigdigit_count(&x), bigdigit_count(&y));
    parts array[u32];
    for i size = 0; i < n; i = i + 1 {
      a u32 = getbigdigit(&x, i);
      b u32 = getbigdigit(&y, i);
      push(&parts, a ^ b);
    }
    return squash(x.negative != y.negative, &parts);
  }

  func `==`(x bigint, y bigint) bool {
    return x.negative == y.negative && shray_equal(&x.parts, &y.parts);
  }
  func `!=`(x bigint, y bigint) bool {
    return !(x == y);
  }

  func backwards_lexicographic_less(x * ^[0]u32, y * ^[0]u32, n size) bool {
    while n > 0 {
      n = n - 1;
      if x[n] < y[n] {
        return true;
      } else if x[n] > y[n] {
        return false;
      }
    }
    return false;
  }

  func is_negative(x *bigint) bool {
    return x->negative;
  }

  func `<`(x bigint, y bigint) bool {
    if x.negative {
      if y.negative {
        xn size = count(&x.parts);
        yn size = count(&y.parts);
        if xn == yn {
          return backwards_lexicographic_less(data(&x.parts), data(&y.parts), xn);
        } else if xn < yn {
          return false;
        } else {
          return true;
        }
      } else {
        return true;
      }
    } else {
      if y.negative {
        return false;
      } else {
        xn size = count(&x.parts);
        yn size = count(&y.parts);
        if xn == yn {
          return backwards_lexicographic_less(data(&x.parts), data(&y.parts), xn);
        } else if xn < yn {
          return true;
        } else {
          return false;
        }
      }
    }
  }
  func `<=`(x bigint, y bigint) bool {
    return !(y < x);
  }
  func `>`(x bigint, y bigint) bool {
    return y < x;
  }
  func `>=`(x bigint, y bigint) bool {
    return !(x < y);
  }
}

func `~`(x i8) bigint {
  if x < 0 {
    x32 i32 = ~x;
    xu32 u32 = ~ (-x32);
    positive bigint = ~xu32;
    return -positive;
  } else {
    return ~ @[u32] ~x;
  }
}

func convert_to_bigint(base u32, digits *shray[i8]) bigint {
  acc bigint;
  bigbase bigint = ~base;
  n size = count(digits);
  for i size = 0; i < n; i = i + 1 {
    x i8 = get(digits, i);
    check(x >= 0 && @[u32]~x < base);
    acc = multiply(&acc, &bigbase) + ~x;
  }
  return acc;
}

func bigu(x u32) bigint { return ~x; }

func[T] big(arr T) bigint {
  b array[i8];
  reserve(&b, arr.length);
  for i size = 0; i < arr.length; i = i + 1 {
    val i8 = ~(@[u8] arr[i] - '0');
    check(val < 10);
    push(&b, val);
  }
  b2 shray[i8] = freeze(&b);
  return convert_to_bigint(10, &b2);
}

struct big_ctx {
  verbose bool;
  failures u32;
}

func[T] add_test(ctx *big_ctx, name T, result bool) void {
  name8 array[u8] = _u8(name);
  if !result {
    print(Stdout(), _u8("bigint test "), name8, _u8(" FAIL\n"));
    ign var = fflush(Stdout());
    ctx->failures = ctx->failures + 1;
  } else {
    if ctx->verbose {
      print(Stdout(), _u8("bigint test "), name8, _u8(" PASS\n"));
      ign var = fflush(Stdout());
    }
  }
}

func test_bigint(verbose bool) bool {
  ctx big_ctx = {verbose, 0};
  fourg bigint = multiply(@[bigint]~ @[u32]2, ~ @[u32]0x80000000);
  add_test(&ctx, "b001", big("1") + big("2") == big("3"));
  add_test(&ctx, "b002", big("20") + big("30") == big("50"));
  add_test(&ctx, "b003", big("2000000000") + big("3000000000") == big("5000000000"));
  add_test(&ctx, "b004", big("2000000000") - big("3000000000") == - big("1000000000"));
  add_test(&ctx, "b005", multiply(-big("10000000000"), -big("17")) == big("170000000000"));
  add_test(&ctx, "b006", (big("129") >> 2) == (big("32")));
  add_test(&ctx, "b007", (multiply(fourg, big("129")) >> 34) == (big("32")));
  add_test(&ctx, "b008", ((-big("9")) >> 2) == (-big("3")));
  add_test(&ctx, "b009", ((-multiply(fourg, big("9"))) >> 34) == (-big("3")));
  add_test(&ctx, "b010", ((big("9")) << 2) == (big("36")));
  add_test(&ctx, "b011", ((big("9")) << 34) == multiply(fourg, big("36")));
  add_test(&ctx, "b012", incr(fourg - big("1")) == fourg);
  add_test(&ctx, "b013", incr(fourg) == (fourg + big("1")));
  add_test(&ctx, "b014", incr(big("1")) == big("2"));
  add_test(&ctx, "b015", incr(big("0")) == big("1"));
  add_test(&ctx, "b016", incr(-big("1")) == big("0"));
  add_test(&ctx, "b017", incr(-big("2")) == -big("1"));
  add_test(&ctx, "b018", incr(-big("18")) == -big("17"));
  add_test(&ctx, "b019", incr(-big("19")) == -big("18"));
  add_test(&ctx, "b020", incr(-fourg) == -(fourg - big("1")));
  add_test(&ctx, "b021", incr(-(fourg + big("1"))) == -fourg);
  add_test(&ctx, "b022", divmod(big("17"), big("3")) == {big("5"), big("2")});
  add_test(&ctx, "b023", divmod(-big("17"), big("3")) == {-big("6"), big("1")});
  add_test(&ctx, "b024", ((-big("3")) & big("3")) == big("1"));
  add_test(&ctx, "b025", ((-big("3")) | big("2")) == -big("1"));
  add_test(&ctx, "b026", ((-big("3")) ^ big("3")) == -big("2"));
  add_test(&ctx, "b027", ^big("3") == -big("4"));
  return ctx.failures == 0;
}

func[H] build_u8str(help H, r *array[u8], x *bigint) void {
  append(r, _u8("big"));
  if is_negative(x) {
    append(r, _u8("(neg)"));
  }
  push(r, '{');
  n size = bigdigit_count(x);
  for i size = 0; i < n; i = i + 1 {
    if i != 0 {
      push(r, ' ');
    }
    k u32 = getbigdigit(x, i);
    build_u8str(help, r, &k);
  }
  push(r, '}');
}
