import check;
import primeval;

/* bnno = b.n.n.o. = "bytes" (not necessarily octets)

"sizes" are in bnno's -- in terms of the minimal addressable unit --
on the HP Saturn that'd be nibbles, on other systems it might be 16
bits.  The term "bnno" is used because "byte" is so likely to be
misinterpreted. */

struct st_objpool {
  objects array[opt[st_value]];
}

func mk_objpool() st_objpool {
  return {mk_array@[opt[st_value]]()};
}

struct st_env {
  pool *st_objpool;

  plat platform_info;

  // Indexed by cell_num.  Contains the number of the object representing the cell -- if the cell/object currently exists.
  framecells array[opt[st_obj_ref]];
}

func mk_env(pool *st_objpool, plat platform_info, num_cells size) st_env {
  ret st_env = {pool, plat, repeat(num_cells, None)};
  return ret;
}

struct st_obj_num { x size; }
func `==`(a st_obj_num, b st_obj_num) bool { return a.x == b.x; }
func `!=`(a st_obj_num, b st_obj_num) bool { return a.x != b.x; }

struct st_obj_ref {
  num st_obj_num;
  // The offset, in terms of bnnos
  offset u32;
  // The size, in terms of bnnos
  count u32;
}

struct st_pointer {
  num st_obj_num;
  // The offset, in terms of bnnos.
  offset u32;
}

struct st_symbolref {
  fnid fn_body_id;
}

struct st_value {
  // Note: Even when targeting big-endian systems, the lsB of a word is the still the least-addressable byte of that chunk of memory in this code here.  So, a 32-bit value of "5" would be represented by the array {0x05000000} when we target big-endian systems.  (Middle-endian on 16-bit systems could be a thing too.)
  words array[u32];
  // Bits set to 1 for those bits (in [0:length)) that are not garbage, not covered by refs.
  datas array[u32];
  // The length of the value in bnnos.
  length u32;
  // Values of external symbol references -- they start at a bnno offset, and have some size that depends on what kind of symbolref it is (or what platform, some only have one kind).
  symbolrefs array[tup[u32, st_symbolref]];
  // Pointers to other objects -- they start at a bnno offset, and have a specific size (on the HP Saturn, 5 bnnos, or 20 bits).
  objrefs array[tup[u32, st_pointer]];
}

func is_selfcontained(val *st_value) bool {
  return empty(&val->symbolrefs) && empty(&val->objrefs);
}

func is_fully_initialized(plat *platform_info, val *st_value) bool {
  ones array[u32] = mk_ones(plat, val->length);
  mask array[u32] = initialization_mask(plat, &ones, val);
  return array_equal(&ones, &mask);
}

func initialization_mask(plat *platform_info, ones *array[u32], val *st_value) array[u32] {
  ret array[u32] = val->datas;
  nsyms size = count(&val->symbolrefs);
  for i size = 0; i < nsyms; i = i + 1 {
    p *tup[u32, st_symbolref] = ref(&val->symbolrefs, i);
    copy_bnnos(plat, ones, p->car, st_symbolref_size(plat, &p->cdr), &ret, p->car);
  }
  nptrs size = count(&val->objrefs);
  for i size = 0; i < nptrs; i = i + 1 {
    p *tup[u32, st_pointer] = ref(&val->objrefs, i);
    copy_bnnos(plat, ones, p->car, st_pointer_size(plat, &p->cdr), &ret, p->car);
  }

  return ret;
}

func ref_obj(env *st_env, num st_obj_num, out **st_value) np {
  if case &Has(v st_value) = ref(&env->pool->objects, num.x) {
    *out = &v;
    return NoFail;
  } else {
    return ERR(_u8("static evaluation accessing object that has been destroyed"));
  }
}

func st_symbolref_size(plat *platform_info, sref *st_symbolref) u32 {
  return plat->fntraits.size;
}

func st_pointer_size(plat *platform_info, p *st_pointer) u32 {
  return plat->ptrtraits.size;
}

func copy_bnnos(plat *platform_info, src *array[u32], offset u32, count u32, dest *array[u32], dest_offset u32) void {
  bnno_size u32 = plat->bnno_size;
  mask u32 = (@[u32]1 << bnno_size) - 1;
  per_word u32 = 32 / bnno_size;
  for i u32 = 0; i < count; i = i + 1 {
    si u32 = offset + i;
    x u32 = get(src, ~(si / per_word));
    y u32 = mask & (x >> (bnno_size * (si % per_word)));
    di u32 = dest_offset + i;
    d *u32 = ref(dest, ~(di / per_word));
    sh u32 = bnno_size * (di % per_word);
    z u32 = *d & ^(mask << sh);
    *d = z | (y << sh);
  }
}

func value_read(plat *platform_info, val *st_value, offset u32, ncount u32, out *st_value) void {
  end u32 = offset + ncount;
  if end > val->length {
    ice(_u8("static eval reading object out-of-bounds"));
  }
  refs array[tup[u32, st_symbolref]];
  val_nrefs size = count(&val->symbolrefs);
  for i size = 0; i < val_nrefs; i = i + 1 {
    vref *tup[u32, st_symbolref] = ref(&val->symbolrefs, i);
    vref_offset u32 = vref->car;
    vref_end u32 = vref_offset + st_symbolref_size(plat, &vref->cdr);
    if offset <= vref_offset && vref_end <= end {
      push(&refs, {vref_offset - offset, vref->cdr});
    }
  }

  objrefs array[tup[u32, st_pointer]];
  val_nobjrefs size = count(&val->objrefs);
  for i size = 0; i < val_nobjrefs; i = i + 1 {
    vref *tup[u32, st_pointer] = ref(&val->objrefs, i);
    vref_offset u32 = vref->car;
    vref_end u32 = vref_offset + st_pointer_size(plat, &vref->cdr);
    if offset <= vref_offset && vref_end <= end {
      push(&objrefs, {vref_offset - offset, vref->cdr});
    }
  }

  bnnos_per_word u32 = 32 / plat->bnno_size;
  ws array[u32] = repeat(~ceil_divide(ncount, bnnos_per_word), 0);
  copy_bnnos(plat, &val->words, offset, ncount, &ws, 0);
  ds array[u32] = repeat(~ceil_divide(ncount, bnnos_per_word), 0);
  copy_bnnos(plat, &val->datas, offset, ncount, &ds, 0);

  *out = {ws, ds, ncount, refs, objrefs};
}

func obj_read(env *st_env, oref st_obj_ref, out *st_value) np {
  val *st_value;
  if case Printed(pm) = ref_obj(env, oref.num, &val) {
    return Printed(pm);
  }
  value_read(&env->plat, val, oref.offset, oref.count, out);
  return NoFail;
}

func value_write(plat *platform_info, val *st_value, offset u32, ncount u32, in *st_value) void {
  if ncount != in->length {
    ice(_u8("value_write sees non-matching length"));
  }
  end u32 = offset + ncount;
  if end > val->length {
    ice(_u8("static eval writing object out-of-bounds"));
  }

  w size = 0;
  val_nrefs size = count(&val->symbolrefs);
  for i size = 0; i < val_nrefs; i = i + 1 {
    vref *tup[u32, st_symbolref] = ref(&val->symbolrefs, i);
    vref_offset u32 = vref->car;
    vref_end u32 = vref_offset + st_symbolref_size(plat, &vref->cdr);
    if vref_end <= offset || end <= vref_offset {
      *ref(&val->symbolrefs, w) = *vref;
      w = w + 1;
    }
  }
  truncate(&val->symbolrefs, w);
  for i size = 0; i < count(&in->symbolrefs); i = i + 1 {
    sref *tup[u32, st_symbolref] = ref(&in->symbolrefs, i);
    push(&val->symbolrefs, {sref->car + offset, sref->cdr});
  }

  w = 0;
  val_nobjrefs size = count(&val->objrefs);
  for i size = 0; i < val_nobjrefs; i = i + 1 {
    vref *tup[u32, st_pointer] = ref(&val->objrefs, i);
    vref_offset u32 = vref->car;
    vref_end u32 = vref_offset + st_pointer_size(plat, &vref->cdr);
    if vref_end <= offset || end <= vref_offset {
      *ref(&val->objrefs, w) = *vref;
      w = w + 1;
    }
  }
  truncate(&val->objrefs, w);
  for i size = 0; i < count(&in->objrefs); i = i + 1 {
    iref *tup[u32, st_pointer] = ref(&in->objrefs, i);
    push(&val->objrefs, {iref->car + offset, iref->cdr});
  }

  copy_bnnos(plat, &in->words, 0, in->length, &val->words, offset);
  copy_bnnos(plat, &in->datas, 0, in->length, &val->datas, offset);
}

func obj_write(env *st_env, oref st_obj_ref, in *st_value) np {
  if oref.count != in->length {
    ice(_u8("static eval writing object with non-matching length (oref.count="), oref.count, _u8(", in->length="), in->length, _u8(")"));
  }
  val *st_value;
  if case Printed(pm) = ref_obj(env, oref.num, &val) {
    return Printed(pm);
  }
  value_write(&env->plat, val, oref.offset, oref.count, in);
  return NoFail;
}

// TODO: Eventually get rid of this.
func[T] cell_obj_ref(env *st_env, num cell_num, msg T) st_obj_ref {
  if case &Has(obj_ref st_obj_ref) = ref(&env->framecells, num.x) {
    return obj_ref;
  } else {
    ice(_u8(msg));
    return fake();
  }
}

func try_cell_obj_ref(env *st_env, num cell_num, out *st_obj_ref) bool {
  if case &Has(obj_ref st_obj_ref) = ref(&env->framecells, num.x) {
    *out = obj_ref;
    return true;
  } else {
    return false;
  }
}

func cell_obj_ref(env *st_env, num cell_num) st_obj_ref {
  if case &Has(obj_ref st_obj_ref) = ref(&env->framecells, num.x) {
    return obj_ref;
  } else {
    ice(_u8("static eval accessing inactive cell, cell_num="), num.x);
    return fake();
  }
}

func add_obj(env *st_env, size u32) st_obj_num {
  ret st_obj_num;
  ret.x = count(&env->pool->objects);
  push(&env->pool->objects, Has(mk_st_value(&env->plat, size)));
  return ret;
}

func mk_st_value(plat *platform_info, size u32) st_value {
  zeros array[u32] = repeat(~ceil_divide(size * plat->bnno_size, 32), 0);
  // Importantly, datas is initialized to all-zero, indicating all garbage.
  return {zeros, zeros, size, mk_array(), mk_array()};
}

func mk_ones(plat *platform_info, length u32) array[u32] {
  bitlength u32 = length * plat->bnno_size;
  n size = ~ceil_divide(bitlength, 32);
  ones array[u32] = repeat(n, 0xFFFFFFFF);
  extra u32 = bitlength % 32;
  if extra != 0 {
    *ref(&ones, n - 1) = @[u32]0xFFFFFFFF >> (32 - extra);
  }
  return ones;
}

func mk_st_value_words(plat *platform_info, words array[u32], length u32) st_value {
  ones array[u32] = mk_ones(plat, length);
  return {words, ones, length, mk_array(), mk_array()};
}

func mk_st_value_pointer(plat *platform_info, p st_pointer) st_value {
  length u32 = st_pointer_size(plat, &p);
  ret st_value = mk_st_value(plat, length);
  push(&ret.objrefs, {@[u32] 0, p});
  return ret;
}

func mk_st_value_symbolref(plat *platform_info, fnid fn_body_id) st_value {
  r st_symbolref = {fnid};
  length u32 = st_symbolref_size(plat, &r);
  ret st_value = mk_st_value(plat, length);
  push(&ret.symbolrefs, {@[u32] 0, r});
  return ret;
}

func ensure_def_inst_evaled(clq *clqueue, ent_id def_entry_id, inst_id def_inst_id, out **st_value) np {
  if case Printed(pm) = ensure_def_inst_graphed(clq, ent_id, inst_id) {
    return Printed(pm);
  }
  return st_eval_def(clq, ent_id, inst_id, out);
}

func st_eval_def(clq *clqueue, ent_id def_entry_id, inst_id def_inst_id, out **st_value) np {
  ent *def_entry = ref_def_entry(clq->cs, ent_id);
  inst *def_inst = ref_inst(clq->cs, inst_id);

  defname string = lookup(clq->cs->im, ent->def_name);
  inst_ty *cu_typrop = un(&inst->typrop);
  if inst->rhs_status != FinishedCheckingRhs {
    ice(_u8("Evaling def we have not finished checking rhs."));
  }

  check(is_defwise_trivial(&inst_ty->props));

  fg *frame_regraphed;
  if case &Computed(ofg opt[frame_regraphed]) = &inst->graph {
    if case &Has(fg2 frame_regraphed) = &ofg {
      fg = &fg2;
    } else {
      ice(_u8("st_eval_def on prim or extern def "), defname);
    }
  } else {
    ice(_u8("Evaling def whose graph we have not computed."));
  }

  switch &inst->evaled_value {
    case &NotComputed: {
      inst->evaled_value = BeganComputing;
      pool st_objpool = mk_objpool();
      env st_env = mk_env(&pool, clq->cs->plat, count(&fg->gr.cells));

      if case Printed(printed_meta bool) = st_eval_frame_regraphed(clq, &env, fg) {
        // We ignore printed_meta -- this is like a stack trace.
        inst->evaled_value = FailedComputation;
        return ERR(_u8("(in evaling def "), defname, _u8(")"));
      }
      result st_obj_ref = cell_obj_ref(&env, fg->cell, "in st_eval_def");
      value st_value;
      if case Printed(printed_meta bool) = obj_read(&env, result, &value) {
        // We ignore printed_meta.
        inst->evaled_value = FailedComputation;
        return ERR(_u8("(in result from evaling def "), defname, _u8(")"));
      }
      if count(&value.objrefs) != 0 {
        inst->evaled_value = FailedComputation;
        return ERR(_u8("def value (for "), defname, _u8(") has objrefs"));
      }
      if !is_fully_initialized(&env.plat, &value) {
        inst->evaled_value = FailedComputation;
        return ERR(_u8("def value (for "), defname, _u8(") is not fully initialized"));
      }

      inst->evaled_value = Computed(value);
      if case &Computed(x st_value) = &inst->evaled_value {
        *out = &x;
      } else {
        ice(_u8("locally impossible in st_eval_def"));
      }
      return NoFail;
    }
    case &BeganComputing: {
      inst->evaled_value = FailedComputation;
      return ERR(_u8("recursively computing def inst's value"));
    }
    case &FailedComputation: {
      return ERR(_u8("repeat error of st_eval_def"));
    }
    case &Computed(x st_value): {
      *out = &x;
      return NoFail;
    }
  }
}

func st_eval_frame_regraphed(clq *clqueue, env *st_env, fg *frame_regraphed) np {
  // A stack of gr_num's to evaluate, in order.
  stack array[gr_num];
  push(&stack, fg->gn);
  while case Has(gn gr_num) = popval(&stack) {
    switch ref_node(&fg->gr, gn) {
    case &XOp(xn gr_xnode):
      switch &xn.op {
      case &GrApply(a gr_apply):
        funref st_obj_ref = cell_obj_ref(env, a.funcell, "in I");
        if !is_full_oref(env, funref) {
          ice(_u8("Function apply funptr cell is sub-object"));
        }
        funvalue st_value;
        if case Printed(pm) = obj_read(env, funref, &funvalue) {
          return Printed(pm);
        }
        st_deaden(env, a.funcell);

        funcval st_symbolref;
        if case Printed(pm) = st_value_as_symbolref(&env->plat, &funvalue, &funcval) {
          return Printed(pm);
        }
        nparams size = count(&a.params);
        paramorefs array[st_obj_ref];
        reserve(&paramorefs, nparams);
        for i size = 0; i < nparams; i = i + 1 {
          c cell_num = get(&a.params, i);
          param_oref st_obj_ref = cell_obj_ref(env, c, "in II");
          if !is_full_oref(env, param_oref) {
            ice(_u8("Function parameter cell is sub-object (offset="), param_oref.offset, _u8(", count="), param_oref.count, _u8(", type="), to_u8str(clq->cs->im, ref(&fg->gr.cells, c.x)->type), _u8(")"));
          }
          push(&paramorefs, param_oref);
          *ref(&env->framecells, c.x) = None;
        }

        retvalref st_obj_ref = cell_obj_ref(env, a.retcell, "in III");

        if case Printed(pm) = st_eval_fn_body(clq, env, &paramorefs, retvalref, funcval.fnid) {
          return Printed(pm);
        }

      case &GrPrimApply(a gr_prim_apply):
        nparams size = count(&a.params);
        paramorefs array[st_obj_ref];
        reserve(&paramorefs, nparams);
        for i size = 0; i < nparams; i = i + 1 {
          c cell_num = get(&a.params, i);
          param_oref st_obj_ref = cell_obj_ref(env, c, "in IIIa");
          if !is_full_oref(env, param_oref) {
            // TODO: Kind of code duplication with GrApply case.
            ice(_u8("Primitive op parameter cell is sub-object (offset="), param_oref.offset, _u8(", count="), param_oref.count, _u8(", type="), to_u8str(clq->cs->im, ref(&fg->gr.cells, c.x)->type), _u8(")"));
          }
          push(&paramorefs, param_oref);
          *ref(&env->framecells, c.x) = None;
        }

        retvalref st_obj_ref = cell_obj_ref(env, a.retcell, "in IIIb");

        if case Printed(pm) = st_eval_prim_op(clq, env, &paramorefs, retvalref, &a.primop) {
          return Printed(pm);
        }

      case &GrMemCopy(a gr_memcopy):
        destref st_obj_ref = cell_obj_ref(env, a.dest, "in IV");
        srcref st_obj_ref;
        if !try_cell_obj_ref(env, a.src, &srcref) {
          return ERR(_u8("ICE: cell obj cannot be reffed (in V) (cell num = "), a.src.x, _u8(")"));
        }
        value st_value;
        if case Printed(pm) = obj_read(env, srcref, &value) {
          return Printed(pm);
        }
        if case Printed(pm) = obj_write(env, destref, &value) {
          return Printed(pm);
        }

      case &GrWriteConst(a gr_writeconst):
        destref st_obj_ref;
        if !try_cell_obj_ref(env, a.dest, &destref) {
          return ERR(_u8("ICE: cell obj cannot be reffed (in VI) (cell num = "), a.dest.x, _u8(")"));
        }
        value st_value;
        if case Printed(pm) = st_const_compute(clq, &env->plat, &a.value, destref.count, &value) {
          return Printed(pm);
        }
        if case Printed(pm) = obj_write(env, destref, &value) {
          return Printed(pm);
        }

      case &GrAddressof(a gr_addressof):
        destref st_obj_ref = cell_obj_ref(env, a.dest, "in VII");
        addressee_ref st_obj_ref = cell_obj_ref(env, a.addressee, "in VIII");
        value st_value = mk_st_value_pointer(&env->plat, {addressee_ref.num, addressee_ref.offset});
        if case Printed(pm) = obj_write(env, destref, &value) {
          return Printed(pm);
        }

      case &GrDeref(a gr_deref):
        pointer_obj st_obj_ref = cell_obj_ref(env, a.pointer, "in IX");
        pointer_value st_value;
        if case Printed(pm) = obj_read(env, pointer_obj, &pointer_value) {
          return Printed(pm);
        }
        pointer st_pointer;
        if case Printed(pm) = st_value_as_pointer(&env->plat, &pointer_value, &pointer) {
          return Printed(pm);
        }
        info *cell_info = ref_cell(&fg->gr, a.name);
        deref_size u32 = info->props.flat_size;
        // We add offset to pointer.offset.
        offset u32;
        if case Printed(pm) = st_offset_compute(env, a.offset, &offset) {
          return Printed(pm);
        }
        new_offset u32 = pointer.offset + offset;
        if case &Has(referee_val st_value) = ref(&env->pool->objects, pointer.num.x) {
          if new_offset > referee_val.length {
            return ERR(_u8("Dereferencing pointer out of range"));
          }
        } else {
          return ERR(_u8("Dereferencing pointer to dead object"));
        }
        *ref(&env->framecells, a.name.x) = Has(@[st_obj_ref]{pointer.num, new_offset, deref_size});

      case &GrSubcell(a gr_subcell):
        partof_obj st_obj_ref = cell_obj_ref(env, a.partof, "in X");
        offset u32;
        if case Printed(pm) = st_offset_compute(env, a.offset, &offset) {
          return Printed(pm);
        }
        if offset > partof_obj.count {
          return ERR(_u8("Subcell index out of range (for cell)"));
        }
        info *cell_info = ref_cell(&fg->gr, a.name);
        deref_size u32 = info->props.flat_size;
        new_offset u32 = partof_obj.offset + offset;
        if case &Has(referee_val st_value) = ref(&env->pool->objects, partof_obj.num.x) {
          if new_offset > referee_val.length {
            return ERR(_u8("Subcell index out of range (for object)"));
          }
        } else {
          return ERR(_u8("Accessing subcell of dead object"));
        }
        *ref(&env->framecells, a.name.x) = Has(@[st_obj_ref]{partof_obj.num, new_offset, deref_size});

      case &GrLive(a gr_live):
        if isHas(ref(&env->framecells, a.cell.x)) {
          return ERR(_u8("GrLive sees already-live cell "), to_u8str(a.cell.x));
        }
        info *cell_info = ref_cell(&fg->gr, a.cell);
        if !isLocationStatic(location(info)) {
          return ERR(_u8("GrLive on non-static cell"));
        }

        objnum st_obj_num = add_obj(env, info->props.flat_size);
        *ref(&env->framecells, a.cell.x) = Has(@[st_obj_ref]{objnum, 0, info->props.flat_size});

        destref st_obj_ref = cell_obj_ref(env, a.cell, "in XII");
        value st_value = mk_st_value(&env->plat, destref.count);
        if case Printed(pm) = obj_write(env, destref, &value) {
          return Printed(pm);
        }

      case &GrAssertLive(a gr_assert_live):
        if !isHas(ref(&env->framecells, a.cell.x)) {
          return ERR(_u8("GrAssertLive sees un-live cell."));
        }

      case &GrDead(a gr_dead):
        st_deaden(env, a.cell);

      case &GrVirtualDead(a gr_virtual_dead):
        // TODO: At some point we'll want to assert that virtual cells (and static cells) dead when we define them _active_.
        // We mark the cell inactive.
        if !isHas(ref(&env->framecells, a.cell.x)) {
          ice(_u8("GrVirtualDead deading inactive cell "), a.cell.x);
        }
        *ref(&env->framecells, a.cell.x) = None;


      // TODO: We could track active/inactive cells at eval-time too. (It's a useful assertion.)
      case &GrActiveXop(a gr_active_xop): { }
      case &GrManyActiveXop(a gr_many_active_xop): { }
      }

    case &QOp(qn gr_qnode):
      switch &qn.op {
      case &GrBranch(a gr_branch):
        src_obj st_obj_ref = cell_obj_ref(env, a.src, "in XI");
        src_value st_value;
        if case Printed(pm) = obj_read(env, src_obj, &src_value) {
          return Printed(pm);
        }
        ncases size = count(&a.cases);
        found bool = false;
        for i size = 0; i < ncases && !found; i = i + 1 {
          case_i *tup[gr_const, sq_num] = ref(&a.cases, i);
          case_value st_value;
          if case Printed(pm) = st_const_compute(clq, &env->plat, &case_i->car, src_obj.count, &case_value) {
            return Printed(pm);
          }
          case_matches bool;
          if case Printed(pm) = st_values_selfcontained_equal(&env->plat, &src_value, &case_value, &case_matches) {
            return Printed(pm);
          }
          if case_matches {
            push(&stack, case_i->cdr.x);
            found = true;
          }
        }
        if !found {
          if case Has(default_gn sq_num) = a.default_case {
            push(&stack, default_gn.x);
          } else {
            return ERR(_u8("GrBranch meets unhandled case"));
          }
        }

      case &GrSequence(a gr_sequence):
        // first gets evaluated before second (because it gets pushed after)
        push(&stack, a.second.x);
        push(&stack, a.first);

      case &GrJmp(a gr_jmp):
        push(&stack, a.next.x);

      case &GrQNop: { }
      }
    }
  }

  return NoFail;
}

func st_deaden(env *st_env, cell cell_num) void {
  // We make the object destroyed and mark the cell inactive.
  if case &Has(objref st_obj_ref) = ref(&env->framecells, cell.x) {
    // (We should only be using GrDead and st_deaden for cells that own the whole object.)
    if !is_full_oref(env, objref) {
      ice(_u8("st_deaden sees non-full objref"));
    }
    *ref(&env->pool->objects, objref.num.x) = None;
  } else {
    ice(_u8("deading unlive cell"));
  }
  *ref(&env->framecells, cell.x) = None;
}

func st_eval_fn_body(clq *clqueue, env *st_env, paramorefs *array[st_obj_ref], retvalref st_obj_ref, fnid fn_body_id) np {
  nparams size = count(paramorefs);
  switch &ref_fn_body(clq->cs, fnid)->u {
  case &GraphedFnBody(fnent graphed_fn_body):
    nargcells size = count(&fnent.argcells);
    if nparams != nargcells {
      ice(_u8("Param list length ("), nparams, _u8(") mismatches function argcells length ("), nargcells, _u8(") for name "), lookup(clq->im, fnent.graph.gr.informal_name));
    }

    subenv st_env = mk_env(env->pool, env->plat, count(&fnent.graph.gr.cells));
    for i size = 0; i < nparams; i = i + 1 {
      *ref(&subenv.framecells, get(&fnent.argcells, i).x) = Has(get(paramorefs, i));
    }
    *ref(&subenv.framecells, fnent.graph.cell.x) = Has(retvalref);

    if case Printed(printed_meta bool) = st_eval_frame_regraphed(clq, &subenv, &fnent.graph) {
      // We ignore printed_meta -- this is essentially a stack frame.
      return ERR(_u8("(in evaling fn "), lookup(clq->im, fnent.graph.gr.informal_name), _u8(")"));
    }
    return NoFail;
  case &ExternFnBody(exent extern_fn_body):
    return ERR(_u8("st_eval_fn_body cannot eval extern fn body named "), lookup(clq->im, exent.name));
  }
}

func is_dead_oref(env *st_env, oref st_obj_ref) bool {
  return !isHas(ref(&env->pool->objects, oref.num.x));
}

func is_full_oref(env *st_env, oref st_obj_ref) bool {
  if oref.offset == 0 {
    if case &Has(val st_value) = ref(&env->pool->objects, oref.num.x) {
      if oref.count == val.length {
        return true;
      }
    }
  }
  return false;
}

func st_values_selfcontained_equal(plat *platform_info, a *st_value, b *st_value, out *bool) np {
  check(a != b);
  if a->length != b->length {
    ice(_u8("st_values_equal sees non-equal lengths"));
  }
  // Right now nothing expects to compare pointer values.
  if !(is_selfcontained(a) && is_selfcontained(b)) {
    return ERR(_u8("Comparing non-self-contained values"));
  }
  expected_datas array[u32] = mk_ones(plat, a->length);
  if !array_equal(&a->datas, &expected_datas) || !array_equal(&b->datas, &expected_datas) {
    // Arguably if just one of the initialized bits is different, we could deterministically declare the values non-equal.  But, no.
    return ERR(_u8("Comparing non-initialized values"));
  }

  *out = array_equal(&a->words, &b->words);
  return NoFail;
}

func st_const_compute(clq *clqueue, plat *platform_info, c *gr_const, length u32, out *st_value) np {
  switch c {
  case &ConstInt(b bigint):
    *out = st_bigint_to_value_unsigned(plat, length, b);
  case &ConstDef(ip instpair):
    val *st_value;
    if case Printed(pm) = ensure_def_inst_evaled(clq, ip.ent_id, ip.inst_id, &val) {
      return Printed(pm);
    }
    *out = *val;
  case &ConstFnBody(fnid fn_body_id):
    *out = mk_st_value_symbolref(plat, fnid);
  case &ConstBytes(arr shray[u8]):
    *out = st_u8s_to_value(plat, &arr);
  }
  return NoFail;
}

// Same as st_const_compute except for ConstDef -- we're at code-gen time, everything should be computed.
func st_const_compute_for_gen(cs *checkstate, c *gr_const, length u32, out *st_value) void {
  switch c {
  case &ConstInt(b bigint):
    *out = st_bigint_to_value_unsigned(&cs->plat, length, b);
  case &ConstDef(ip instpair):
    inst *def_inst = ref_inst(cs, ip.inst_id);
    if case &Computed(x st_value) = &inst->evaled_value {
      *out = x;
    } else {
      // This means we forgot to enqueue something onto a clq.
      ice(_u8("st_const_compute_for_gen sees non-computed ConstDef"));
    }
  case &ConstFnBody(fnid fn_body_id):
    *out = mk_st_value_symbolref(&cs->plat, fnid);
  case &ConstBytes(arr shray[u8]):
    *out = st_u8s_to_value(&cs->plat, &arr);
  }
}

func st_offset_compute(env *st_env, gro gr_offset, out *u32) np {
  switch gro {
  case OffsetConst(o u32):
    *out = o;
  case OffsetComputed(pair tup[u32, cell_num]):
    index_obj st_obj_ref = cell_obj_ref(env, pair.cdr, "in XIII");
    index_value st_value;
    if case Printed(pm) = obj_read(env, index_obj, &index_value) {
      return Printed(pm);
    }
    index u32;
    if case Printed(pm) = st_value_as_size(&env->plat, &index_value, &index) {
      return Printed(pm);
    }
    *out = pair.car * index;
  }
  return NoFail;
}

func st_bigint_to_value_unsigned(plat *platform_info, length u32, b bigint) st_value {
  if is_negative(&b) {
    ice(_u8("st_bigint_to_value_unsigned sees negative bigint"));
  }
  ret st_value;
  if !st_bigint_to_value_twos(plat, length, b, &ret) {
    ice(_u8("ConstInt too big for type"));
  }
  return ret;
}

// Signed or unsigned, this works!  Assumes we did a minval/maxval range check elsewhere.
// TODO: Separate signed/unsigned cases rigorously.
func st_bigint_to_value_twos(plat *platform_info, length u32, b bigint, out *st_value) bool {
  check_littleendian(plat);
  ret st_value = mk_st_value(plat, length);
  i u32 = 0;
  for ; i < length; i = i + 1 {
    bnno u32 = bnno_index_bigint(plat, &b, i);
    tmp st_value = mk_st_value_bnno(plat, bnno);
    value_write(plat, &ret, i, 1, &tmp);
  }

  end u32 = ((~bigdigit_count(&b) * bigdigit_bits) / 32);
  expected u32;
  if is_negative(&b) {
    expected = bnno_mask(plat);
  } else {
    expected = 0;
  }

  for ; i < end; i = i + 1 {
    bnno u32 = bnno_index_bigint(plat, &b, i);
    if bnno != expected {
      return false;
    }
  }

  *out = ret;
  return true;
}

func st_value_unsigned_as_bigint(plat *platform_info, val *st_value, out *bigint) np {
  words array[u32];
  if case Printed(pm) = st_value_self_contained(plat, val, &words) {
    return Printed(pm);
  }

  check_littleendian(plat);
  // It's pretty simple when it's little-endian.
  squash(false, &words, out);
  return NoFail;
}

func st_value_signed_twos_as_bigint(plat *platform_info, val *st_value, out *bigint) np {
  words array[u32];
  if case Printed(pm) = st_value_self_contained(plat, val, &words) {
    return Printed(pm);
  }

  check_littleendian(plat);
  check(val->length > 0);
  // Not _so_ simple when little-endian.
  bitlength u32 = val->length * plat->bnno_size;
  index u32 = bitlength - 1;
  negative bool = (0 != (get(&words, ~(index / 32)) & (@[u32] 1 << (index % 32))));
  // Take the positive version of the value, subtract 2-to-the-bitlength if negative.
  tmp bigint;
  squash(false, &words, &tmp);
  if negative {
    tmp = tmp - (bigu(1) << bitlength);
  }
  swap(out, &tmp);
  return NoFail;
}

func st_value_self_contained(plat *platform_info, val *st_value, out *array[u32]) np {
  if !is_selfcontained(val) {
    return ERR(_u8("Value is not self-contained, expecting data."));
  }
  ret array[u32];
  bitlength u32 = val->length * plat->bnno_size;
  n u32 = bitlength / 32;
  for i u32 = 0; i < n; i = i + 1 {
    if get(&val->datas, ~i) != ^ @[u32]0 {
      return ERR(_u8("Use of uninitialized value (I)."));
    }
    push(&ret, get(&val->words, ~i));
  }
  bitrem u32 = bitlength % 32;
  if bitrem != 0 {
    lastmask u32 = ((@[u32]1 << bitrem) - 1);
    if get(&val->datas, ~n) != lastmask {
      return ERR(_u8("Use of uninitialized value (II)."));
    }
    x u32 = get(&val->words, ~n);
    check((x & (^lastmask)) == 0);
    push(&ret, x);
  }

  swap(out, &ret);
  return NoFail;
}

func st_u8s_to_value(plat *platform_info, arr *shray[u8]) st_value {
  n size = count(arr);
  bitlength u32 = ~(n * 8);
  if bitlength % plat->bnno_size != 0 {
    ice(_u8("st_u8s_to_value sees misaligned value (on 16-bit bnno_size?)"));
  }
  length u32 = bitlength / plat->bnno_size;

  ret st_value = mk_st_value(plat, length);
  for i u32 = 0; i < length; i = i + 1 {
    bnno u32 = bnno_index_u8(plat, arr, i);
    tmp st_value = mk_st_value_bnno(plat, bnno);
    value_write(plat, &ret, i, 1, &tmp);
  }

  return ret;
}

func bnno_mask(plat *platform_info) u32 {
  return ((@[u32] 1) << plat->bnno_size) - 1;
}

func mk_st_value_bnno(plat *platform_info, bnno u32) st_value {
  check(0 == (bnno & ^bnno_mask(plat)));
  return mk_st_value_words(plat, mk_array(bnno), 1);
}

func bnno_index_u8(plat *platform_info, arr *shray[u8], ix u32) u32 {
  if plat->bnno_size == 8 {
    return ~get(arr, ~ix);
  } else if plat->bnno_size == 4 {
    check_littleendian(plat);
    return ~get(arr, ~((ix / 2) >> (4 * (ix % 2))));
  } else if plat->bnno_size == 16 {
    lo u32 = ~get(arr, ~(ix * 2));
    hi u32 = ~get(arr, ~(ix * 2 + 1));
    return lo + (hi << 8);
  } else {
    ice(_u8("bnno_index_u8 does not support bnno_size"));
    return fake();
  }
}

func bnno_index_bigint(plat *platform_info, b *bigint, ix u32) u32 {
  check(32 % plat->bnno_size == 0);
  bnnos_per u32 = 32 / plat->bnno_size;
  bigdig u32 = getbigdigit(b, ~ ((ix * plat->bnno_size) / 32));
  ret u32 = bnno_mask(plat) & (bigdig >> ((ix * plat->bnno_size) % 32));
  return ret;
}

func err_nonpointer() np {
  return ERR(_u8("Treating non-pointer value as pointer."));
}

func st_value_as_pointer(plat *platform_info, val *st_value, out *st_pointer) np {
  if count(&val->objrefs) != 1 {
    return err_nonpointer();
  }
  oref *tup[u32, st_pointer] = ref(&val->objrefs, 0);
  if oref->car != 0 {
    return err_nonpointer();
  }
  expected u32 = st_pointer_size(plat, &oref->cdr);
  if val->length != expected {
    return err_nonpointer();
  }
  *out = oref->cdr;
  return NoFail;
}

func err_nonsymbolref() np {
  return ERR(_u8("Expected function pointer."));
}

func st_value_as_symbolref(plat *platform_info, val *st_value, out *st_symbolref) np {
  if count(&val->symbolrefs) != 1 {
    return err_nonsymbolref();
  }
  sref *tup[u32, st_symbolref] = ref(&val->symbolrefs, 0);
  if sref->car != 0 {
    return err_nonsymbolref();
  }
  expected u32 = st_symbolref_size(plat, &sref->cdr);
  if val->length != expected {
    return err_nonsymbolref();
  }
  *out = sref->cdr;
  return NoFail;
}

// Reads a value of the target platform's size type -- but outputs a u32 -- errors if truncation would happen.
func st_value_as_size(plat *platform_info, val *st_value, out *u32) np {
  if val->length != plat->sizetraits.flat.size {
    return ERR(_u8("Treating non-size-sized value as size."));
  }
  b bigint;
  if case Printed(pm) = st_value_unsigned_as_bigint(plat, val, &b) {
    return Printed(pm);
  }
  x u32;
  if !as_non_negative_u32(&b, &x) {
    return ERR(_u8("Size out of range for static evaluation."));
  }
  *out = x;
  return NoFail;
}

func[H] build_u8str(help H, r *array[u8], x *st_value) void {
  append(r, _u8("st_value{len="));
  build_u8str(help, r, &x->length);
  append(r, _u8(","));
  nwords size = count(&x->words);
  for i size = 0; i < nwords; i = i + 1 {
    append(r, _u8(" "));
    append(r, as_zerohex(8, ~get(&x->words, i)));
  }
  append(r, _u8("}"));
}
