import eval;
import state;
import graph;

enum primitive_numeric_op_action {
  NumAdd void;
  NumSub void;
  NumMul void;
  NumDiv void;
  NumMod void;
  NumNegate void;
  NumBitAnd void;
  NumBitOr void;
  NumBitXor void;
  NumBitNot void;
  NumShiftLeft void;
  NumShiftRight void;
}

enum primitive_comparison_op_action {
  CmpEq void;
  CmpNe void;
  CmpLt void;
  CmpGt void;
  CmpLe void;
  CmpGe void;
}

func op_arity(act primitive_numeric_op_action) u32 {
  switch act {
  case NumNegate: return 1;
  case NumBitNot: return 1;
  default: return 2;
  }
}

enum primitive_logical_op {
  LogicalNot void;
  BoolEq void;
  BoolNe void;
  BoolBitAnd void;
  BoolBitOr void;
}

func op_arity(op primitive_logical_op) u32 {
  switch op {
  case LogicalNot: return 1;
  default: return 2;
  }
}

struct primitive_ptr_comparison_op {
  op_action primitive_comparison_op_action;
}

struct primitive_numeric_op {
  // Size in bnnos.
  op_size u32;
  op_numtraits numeric_traits;
  op_action primitive_numeric_op_action;
}

struct primitive_numeric_comparison_op {
  // Size in bnnos.
  op_size u32;
  op_numtraits numeric_traits;
  op_action primitive_comparison_op_action;
}

// This conversion op checks overflow depending on both from_numtraits and to_numtraits.
struct primitive_conversion_op {
  // Size in bnnos.
  from_size u32;
  from_numtraits numeric_traits;
  to_size u32;
  to_numtraits numeric_traits;
}

enum primitive_op {
  PrimNum primitive_numeric_op;
  PrimNumCompare primitive_numeric_comparison_op;
  PrimLogical primitive_logical_op;
  PrimPtrCompare primitive_ptr_comparison_op;
  PrimConversion primitive_conversion_op;
}

func primitive_bool_type(cs *checkstate) te_typeexpr {
  return TeName({cs->im->cym.boolsym, None});
}

func primitive_void_type(cs *checkstate) te_typeexpr {
  return TeName({cs->im->cym.voidsym, None});
}

func primitive_u8_type(cs *checkstate) te_typeexpr {
  return TeName({cs->im->cym.u8sym, None});
}

func primitive_u16_type(cs *checkstate) te_typeexpr {
  return TeName({cs->im->cym.u16sym, None});
}

func primitive_u32_type(cs *checkstate) te_typeexpr {
  return TeName({cs->im->cym.u32sym, None});
}

func primitive_i32_type(cs *checkstate) te_typeexpr {
  return TeName({cs->im->cym.i32sym, None});
}

func primitive_size_type(cs *checkstate) te_typeexpr {
  return TeName({cs->im->cym.sizesym, None});
}

func primitive_string_literal_type(cs *checkstate, n size) te_typeexpr {
  return TeArraytype({Has(~n), emshp(primitive_u8_type(cs))});
}

func primitive_unsigned_bnno_type(cs *checkstate) te_typeexpr {
  if cs->plat.bnno_size == 8 {
    return primitive_u8_type(cs);
  } else {
    ice(_u8("primitive_unsigned_bnno_type: unsupported bnno_size"));
    return fake();
  }
}

func unwrap_primitive_padding_type_size(cs *checkstate, t *cu_typeexpr) u32 {
  if case &TeArraytype(at te_arraytype) = &t->x {
    archetype te_typeexpr = primitive_unsigned_bnno_type(cs);
    unified te_typeexpr;
    if !unify_types(oo(&at.param), &archetype, &unified) {
      ice(_u8("unwrap_primitive_padding_type_size on arraytype with bad param"));
    }
    return *unHas(&at.count);
  } else {
    ice(_u8("unwrap_primitive_padding_type_size on non-arraytype"));
    return fake();
  }
}

func primitive_padding_type(cs *checkstate, n u32) te_typeexpr {
  return TeArraytype({Has(n), emshp(primitive_unsigned_bnno_type(cs))});
}

func primitive_function_puretype(cs *checkstate) te_puretype {
  return TePureName(cs->im->cym.fnsym);
}

func primitive_pointer_puretype(cs *checkstate) te_puretype {
  return TePureName(cs->im->cym.ptrtype_sym);
}

func is_fn_type(cs *checkstate, t *te_typeexpr) bool {
  typarams *shray[te_typeexpr];
  return decompose_typeapp(t, primitive_function_puretype(cs), &typarams);
}

func add_conversion(cs *checkstate, from tup[sym, integral_traits], to tup[sym, integral_traits]) void {
  type te_typeexpr = fn_type(cs, @[te_typeexpr]TeName({from.car, None}), @[te_typeexpr]TeName({to.car, None}));
  add_def_primitive(cs, cs->im->cym.convertsym, type, @[primitive_op]PrimConversion({from.cdr.flat.size, from.cdr.numeric, to.cdr.flat.size, to.cdr.numeric}));
}

func add_nonlossy_conversion(cs *checkstate, from tup[sym, integral_traits], to tup[sym, integral_traits]) void {
  type te_typeexpr = fn_type(cs, @[te_typeexpr]TeName({from.car, None}), @[te_typeexpr]TeName({to.car, None}));
  add_def_primitive(cs, cs->im->cym.nonlossyconvertsym, type, @[primitive_op]PrimConversion({from.cdr.flat.size, from.cdr.numeric, to.cdr.flat.size, to.cdr.numeric}));
}


func add_integral_primitives(cs *checkstate) void {
  // See also is_numeric_type.
  nt ^[12]tup[sym, integral_traits] = {
      {cs->im->cym.i8sym, cs->plat.i8traits},
      {cs->im->cym.u8sym, cs->plat.u8traits},
      {cs->im->cym.o8sym, cs->plat.o8traits},
      {cs->im->cym.i16sym, cs->plat.i16traits},
      {cs->im->cym.u16sym, cs->plat.u16traits},
      {cs->im->cym.o16sym, cs->plat.o16traits},
      {cs->im->cym.i32sym, cs->plat.i32traits},
      {cs->im->cym.u32sym, cs->plat.u32traits},
      {cs->im->cym.o32sym, cs->plat.o32traits},
      {cs->im->cym.diffsym, cs->plat.difftraits},
      {cs->im->cym.sizesym, cs->plat.sizetraits},
      {cs->im->cym.osizesym, cs->plat.osizetraits}
  };

  n size = nt.length;
  for i size = 0; i < n; i = i + 1 {
    add_integral_primitive(cs, nt[i].car, nt[i].cdr);
    for j size = 0; j < n; j = j + 1 {
      add_conversion(cs, nt[i], nt[j]);
      if nt[i].cdr.numeric.minval >= nt[j].cdr.numeric.minval && nt[i].cdr.numeric.maxval <= nt[j].cdr.numeric.maxval {
        add_nonlossy_conversion(cs, nt[i], nt[j]);
      }
    }
  }
}

func add_primitives(cs *checkstate) void {
  add_integral_primitives(cs);
  add_void_primitive(cs);
  add_bool_primitive(cs);
  add_pointer_primitive(cs);
  add_function_primitive(cs);
  add_magic_constructor_primitives(cs);
}

func is_numeric_type(cs *checkstate, pt *te_typeexpr, out *numeric_traits) bool {
  // TODO: This implementation should work on complete types, use proper scoping rules (once we get scoping rules).
  if case &TeName(a te_name) = pt {
    im *identmap = cs->im;
    if a.value == im->cym.i8sym {
      *out = cs->plat.i8traits.numeric;
    } else if a.value == im->cym.u8sym {
      *out = cs->plat.u8traits.numeric;
    } else if a.value == im->cym.o8sym {
      *out = cs->plat.o8traits.numeric;
    } else if a.value == im->cym.i16sym {
      *out = cs->plat.i16traits.numeric;
    } else if a.value == im->cym.u16sym {
      *out = cs->plat.u16traits.numeric;
    } else if a.value == im->cym.o16sym {
      *out = cs->plat.o16traits.numeric;
    } else if a.value == im->cym.i32sym {
      *out = cs->plat.i32traits.numeric;
    } else if a.value == im->cym.u32sym {
      *out = cs->plat.u32traits.numeric;
    } else if a.value == im->cym.o32sym {
      *out = cs->plat.o32traits.numeric;
    } else if a.value == im->cym.sizesym {
      *out = cs->plat.sizetraits.numeric;
    } else if a.value == im->cym.osizesym {
      *out = cs->plat.osizetraits.numeric;
    } else {
      return false;
    }
    return true;
  }
  return false;
}

// The caller is welcome to ignore the return value.
func add_def_primitive(cs *checkstate, name sym, generics ast_generics, type te_typeexpr, definition def_definition) def_entry_id {
  // access_scope is not relevant to a primitive def.
  ent shp[def_entry];
  *oo(&ent) = {cs->im->cym.primitive_module_sym, name, mk_array@[access_entry_id](), generics, definition, Computed(type), mk_hash@[idy_genparms, def_inst_id]()};
  id def_entry_id = add_def_entry(cs, ent);
  return id;
}

// The caller is welcome to ignore the return value.
func add_def_primitive(cs *checkstate, name sym, generics ast_generics, type te_typeexpr, op primitive_op) def_entry_id {
  return add_def_primitive(cs, name, generics, type, @[def_definition]DefnPrim(op));
}

func add_def_primitive(cs *checkstate, name sym, type te_typeexpr, op primitive_op) void {
  ign var = add_def_primitive(cs, name, NoGenerics, type, op);
}

func add_op_primitive(cs *checkstate, oper sym, typename sym, arity size, op primitive_op) void {
  type te_typeexpr = fn_type(cs, repeat(arity + 1, @[te_typeexpr]TeName({typename, None})));
  add_def_primitive(cs, oper, type, op);
}

func add_comparison_primitive(cs *checkstate, oper sym, generics ast_generics, type te_typeexpr, op primitive_op) def_entry_id {
  f te_typeexpr = fn_type(cs, type, type, primitive_bool_type(cs));
  return add_def_primitive(cs, oper, generics, f, op);
}

func add_comparison_primitive(cs *checkstate, oper sym, typename sym, op primitive_op) void {
  ign var = add_comparison_primitive(cs, oper, NoGenerics, @[te_typeexpr]TeName({typename, None}), op);
}

func add_binop_primitive(cs *checkstate, oper sym, typename sym, op primitive_op) void {
  add_op_primitive(cs, oper, typename, 2, op);
}

func add_unop_primitive(cs *checkstate, oper sym, typename sym, op primitive_op) void {
  add_op_primitive(cs, oper, typename, 1, op);
}

func mk_numop(traits integral_traits, action primitive_numeric_op_action) primitive_op {
  return PrimNum({traits.flat.size, traits.numeric, action});
}

func mk_op(traits integral_traits, action primitive_comparison_op_action) primitive_op {
  return PrimNumCompare({traits.flat.size, traits.numeric, action});
}

func add_integral_primitive(cs *checkstate, name sym, traits integral_traits) void {
  add_scalar_primitive(cs, name, traits.flat);
  add_binop_primitive(cs, intern(cs->im, _s("+")), name, mk_numop(traits, NumAdd));
  add_binop_primitive(cs, intern(cs->im, _s("-")), name, mk_numop(traits, NumSub));
  add_binop_primitive(cs, intern(cs->im, _s("*")), name, mk_numop(traits, NumMul));
  add_binop_primitive(cs, intern(cs->im, _s("/")), name, mk_numop(traits, NumDiv));
  add_binop_primitive(cs, intern(cs->im, _s("%")), name, mk_numop(traits, NumMod));
  add_binop_primitive(cs, intern(cs->im, _s("&")), name, mk_numop(traits, NumBitAnd));
  add_binop_primitive(cs, intern(cs->im, _s("|")), name, mk_numop(traits, NumBitOr));
  add_binop_primitive(cs, intern(cs->im, _s("^")), name, mk_numop(traits, NumBitXor));
  add_unop_primitive(cs, intern(cs->im, _s("^")), name, mk_numop(traits, NumBitNot));
  add_binop_primitive(cs, intern(cs->im, _s("<<")), name, mk_numop(traits, NumShiftLeft));
  add_binop_primitive(cs, intern(cs->im, _s(">>")), name, mk_numop(traits, NumShiftRight));
  add_comparison_primitive(cs, intern(cs->im, _s("==")), name, mk_op(traits, CmpEq));
  add_comparison_primitive(cs, intern(cs->im, _s("!=")), name, mk_op(traits, CmpNe));
  add_comparison_primitive(cs, intern(cs->im, _s("<")), name, mk_op(traits, CmpLt));
  add_comparison_primitive(cs, intern(cs->im, _s(">")), name, mk_op(traits, CmpGt));
  add_comparison_primitive(cs, intern(cs->im, _s("<=")), name, mk_op(traits, CmpLe));
  add_comparison_primitive(cs, intern(cs->im, _s(">=")), name, mk_op(traits, CmpGe));

  switch traits.numeric.repr {
  case Unsigned:
    if !traits.numeric.trap_overflow {
      add_unop_primitive(cs, intern(cs->im, _s("-")), name, mk_numop(traits, NumNegate));
    }
  case SignedTwos:
    add_unop_primitive(cs, intern(cs->im, _s("-")), name, mk_numop(traits, NumNegate));
  }
}

func add_void_primitive(cs *checkstate) void {
  add_scalar_primitive(cs, cs->im->cym.voidsym, cs->plat.voidtraits);
}

func add_bool_primitive(cs *checkstate) void {
  add_scalar_primitive(cs, cs->im->cym.boolsym, cs->plat.booltraits);
  add_unop_primitive(cs, intern(cs->im, _s("!")), cs->im->cym.boolsym, @[primitive_op]PrimLogical(LogicalNot));
  add_comparison_primitive(cs, intern(cs->im, _s("==")), cs->im->cym.boolsym, @[primitive_op]PrimLogical(BoolEq));
  add_comparison_primitive(cs, intern(cs->im, _s("!=")), cs->im->cym.boolsym, @[primitive_op]PrimLogical(BoolNe));
  add_binop_primitive(cs, intern(cs->im, _s("&")), cs->im->cym.boolsym, @[primitive_op]PrimLogical(BoolBitAnd));
  add_binop_primitive(cs, intern(cs->im, _s("|")), cs->im->cym.boolsym, @[primitive_op]PrimLogical(BoolBitOr));
}

func add_scalar_primitive(cs *checkstate, name sym, flat_traits flat_traits) void {
  info deftype_inst_info = {
    None,
    @[type_properties]{
      flat_traits.size,
      flat_traits.alignment,
      DerivedMethodTrivial,
      DerivedMethodTrivial,
      DerivedMethodTrivial,
      DerivedMethodTrivial,
      IsScalarYes,
      IsPow2AllTheWayDown
    }
  };
  instparms idy_genparms = blank_idyparms();
  inst_id deftype_inst_id = add_deftype_inst(cs, {instparms, Computed(info)});
  insts array[deftype_inst_id];
  push(&insts, inst_id);
  instst hash[idy_genparms, deftype_inst_id];
  check_insert(&instst, &instparms, inst_id);

  // access_scope is not relevant to a primitive deftype.
  access_scope array[access_entry_id];
  ent deftype_entry = {cs->im->cym.primitive_module_sym, name, access_scope, NoGenerics, None, Has(info), instst};
  id deftype_entry_id = add_deftype_entry(cs, ent);
  // TODO: We probably want to put the id in some kind of "primitive" module.
}

func tee_generic(cs *checkstate) ast_generics {
  return HasGenerics(mk_array(@[ast_generik]PlainGeneric({fake_ast_meta(), cs->im->cym.tee_sym})));
}

func fn_type(cs *checkstate, params shray[te_typeexpr]) te_typeexpr {
  return TeApp({primitive_function_puretype(cs), params, None});
}

func fn_type(cs *checkstate, params shray[te_typeexpr], return_type te_typeexpr) te_typeexpr {
  par array[te_typeexpr] = mk_copy(&params);
  push(&par, return_type);
  return fn_type(cs, freeze(&par));
}

func fn_type(cs *checkstate, t te_typeexpr, u te_typeexpr) te_typeexpr {
  return fn_type(cs, mk_shray(t, u));
}

func fn_type(cs *checkstate, t te_typeexpr, u te_typeexpr, v te_typeexpr) te_typeexpr {
  return fn_type(cs, mk_shray(t, u, v));
}

func ptr_type(cs *checkstate, t te_typeexpr) te_typeexpr {
  return TeApp({primitive_pointer_puretype(cs), mk_shray(t), None});
}

func add_pointer_primitive(cs *checkstate) void {
  add_pointer_primitive_type(cs);
  tee_type te_typeexpr = TeName({cs->im->cym.tee_sym, None});
  bool_type te_typeexpr = primitive_bool_type(cs);
  ent def_entry_id = add_comparison_primitive(cs, intern(cs->im, _s("==")), tee_generic(cs), ptr_type(cs, tee_type), @[primitive_op]PrimPtrCompare({CmpEq}));
  set(&cs->prims.ptr_eq, ent);
  ign var = add_comparison_primitive(cs, intern(cs->im, _s("!=")), tee_generic(cs), ptr_type(cs, tee_type), @[primitive_op]PrimPtrCompare({CmpNe}));
  ign = add_comparison_primitive(cs, intern(cs->im, _s("<")), tee_generic(cs), ptr_type(cs, tee_type), @[primitive_op]PrimPtrCompare({CmpLt}));
  ign = add_comparison_primitive(cs, intern(cs->im, _s(">")), tee_generic(cs), ptr_type(cs, tee_type), @[primitive_op]PrimPtrCompare({CmpGt}));
  ign = add_comparison_primitive(cs, intern(cs->im, _s("<=")), tee_generic(cs), ptr_type(cs, tee_type), @[primitive_op]PrimPtrCompare({CmpLe}));
  ign = add_comparison_primitive(cs, intern(cs->im, _s(">=")), tee_generic(cs), ptr_type(cs, tee_type), @[primitive_op]PrimPtrCompare({CmpGe}));
}

func add_pointer_primitive_type(cs *checkstate) void {
  one_generic array[ast_generik] = mk_array(@[ast_generik]PlainGeneric({fake_ast_meta(), cs->im->cym.tee_sym}));
  // It's as if pointers belong in an even _more_ primitive module than integer/bool types.
  ent deftype_entry = {
    cs->im->cym.primitive_module_sym,
    cs->im->cym.ptrtype_sym,
    mk_array@[access_entry_id](),
    HasGenerics(one_generic),
    None,
    Has({None,
         @[type_properties]{
           cs->plat.ptrtraits.size,
           cs->plat.ptrtraits.alignment,
           DerivedMethodTrivial,
           DerivedMethodTrivial,
           DerivedMethodTrivial,
           DerivedMethodTrivial,
           IsScalarYes,
           IsPow2AllTheWayDown
         }}),
    mk_hash@[idy_genparms, deftype_inst_id]()
  };
  id deftype_entry_id = add_deftype_entry(cs, ent);
  // TODO: We probably want to put the id in some kind of "primitive" or hyper-primitive module.
}

func add_function_primitive(cs *checkstate) void {
  // Likewise as pointers, functions are kind of _more_ primitive than integer/bool types.
  ent deftype_entry = {
    cs->im->cym.primitive_module_sym,
    cs->im->cym.fnsym,
    mk_array@[access_entry_id](),
    VariadicGenerics({mk_array@[ast_ident](), {fake_ast_meta(), cs->im->cym.tee_sym}, mk_array({fake_ast_meta(), cs->im->cym.uee_sym})}),
    None,
    Has({None,
         @[type_properties]{
           cs->plat.fntraits.size,
           cs->plat.fntraits.alignment,
           DerivedMethodTrivial,
           DerivedMethodTrivial,
           DerivedMethodTrivial,
           DerivedMethodTrivial,
           IsScalarYes,
           IsPow2AllTheWayDown
         }}),
    mk_hash@[idy_genparms, deftype_inst_id]()
  };
  id deftype_entry_id = add_deftype_entry(cs, ent);
  // TODO: We probably want to put the id in some kind of "primitive" or hyper-primitive module.
}

func add_non_magic_fn_primitive(cs *checkstate, name sym, args size, nonmag def_non_magic) void {
  parms array[_] = repeat(args, ptr_type(cs, @[te_typeexpr]TeName({cs->im->cym.tee_sym, None})));
  push(&parms, primitive_void_type(cs));
  type te_typeexpr = fn_type(cs, freeze(&parms));
  ign var = add_def_primitive(cs, name, tee_generic(cs), type, @[def_definition]DefnNonMagic(nonmag));
}

func add_magic_constructor_primitive(cs *checkstate, name sym, args size, mag def_magic) void {
  parms array[_] = repeat(args, ptr_type(cs, @[te_typeexpr]TeName({cs->im->cym.tee_sym, None})));
  push(&parms, primitive_void_type(cs));
  type te_typeexpr = fn_type(cs, freeze(&parms));
  ign var = add_def_primitive(cs, name, tee_generic(cs), type, @[def_definition]DefnMagic(mag));
}

func add_magic_constructor_primitives(cs *checkstate) void {
  teetype te_typeexpr = TeName({cs->im->cym.tee_sym, None});
  add_non_magic_fn_primitive(cs, cs->im->cym.init, 1, @[def_non_magic]NonMagicCtor({CtorInit, {teetype, NotComputed}}));
  add_non_magic_fn_primitive(cs, cs->im->cym.copy, 2, @[def_non_magic]NonMagicCtor({CtorCopy, {teetype, NotComputed}}));
  add_non_magic_fn_primitive(cs, cs->im->cym.move, 2, @[def_non_magic]NonMagicCtor({CtorMove, {teetype, NotComputed}}));
  add_non_magic_fn_primitive(cs, cs->im->cym.destroy, 1, @[def_non_magic]NonMagicCtor({CtorDestroy, {teetype, NotComputed}}));

  ign var = add_def_primitive(cs, cs->im->cym.sizeofsym, tee_generic(cs), primitive_size_type(cs), @[def_definition]DefnNonMagic(@[def_non_magic]NonMagicProp({PropSizeof, teetype, NotComputed})));
  ign = add_def_primitive(cs, cs->im->cym.alignofsym, tee_generic(cs), primitive_size_type(cs), @[def_definition]DefnNonMagic(@[def_non_magic]NonMagicProp({PropAlignof, teetype, NotComputed})));

  add_magic_constructor_primitive(cs, cs->im->cym.magic_bzero, 1, @[def_magic]MagicBzero({NotComputed}));
  add_magic_constructor_primitive(cs, cs->im->cym.magic_memcopy, 2, @[def_magic]MagicMemcopy({NotComputed}));
  add_magic_constructor_primitive(cs, cs->im->cym.magic_nopdestroy, 1, @[def_magic]MagicNopdestroy);
  add_magic_constructor_primitive(cs, cs->im->cym.magic_init, 1, @[def_magic]MagicCtor({CtorInit, {teetype, NotComputed}}));
  add_magic_constructor_primitive(cs, cs->im->cym.magic_copy, 2, @[def_magic]MagicCtor({CtorCopy, {teetype, NotComputed}}));
  add_magic_constructor_primitive(cs, cs->im->cym.magic_move, 2, @[def_magic]MagicCtor({CtorMove, {teetype, NotComputed}}));
  add_magic_constructor_primitive(cs, cs->im->cym.magic_destroy, 1, @[def_magic]MagicCtor({CtorDestroy, {teetype, NotComputed}}));
}
